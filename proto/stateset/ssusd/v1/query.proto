syntax = "proto3";
package stateset.ssusd.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "stateset/ssusd/v1/params.proto";
import "stateset/ssusd/v1/ssusd.proto";

option go_package = "github.com/stateset/core/x/ssusd/types";

// Query defines the gRPC querier service for ssUSD module
service Query {
  // Params queries the module parameters
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/stateset/ssusd/v1/params";
  }
  
  // CollateralPosition queries a user's collateral position
  rpc CollateralPosition(QueryCollateralPositionRequest) returns (QueryCollateralPositionResponse) {
    option (google.api.http).get = "/stateset/ssusd/v1/position/{owner}";
  }
  
  // AllPositions queries all collateral positions
  rpc AllPositions(QueryAllPositionsRequest) returns (QueryAllPositionsResponse) {
    option (google.api.http).get = "/stateset/ssusd/v1/positions";
  }
  
  // AgentWallet queries an agent's wallet
  rpc AgentWallet(QueryAgentWalletRequest) returns (QueryAgentWalletResponse) {
    option (google.api.http).get = "/stateset/ssusd/v1/agent/{agent_id}";
  }
  
  // AllAgents queries all agent wallets
  rpc AllAgents(QueryAllAgentsRequest) returns (QueryAllAgentsResponse) {
    option (google.api.http).get = "/stateset/ssusd/v1/agents";
  }
  
  // OraclePrice queries current oracle price
  rpc OraclePrice(QueryOraclePriceRequest) returns (QueryOraclePriceResponse) {
    option (google.api.http).get = "/stateset/ssusd/v1/oracle/{asset}";
  }
  
  // ActiveAuctions queries active liquidation auctions
  rpc ActiveAuctions(QueryActiveAuctionsRequest) returns (QueryActiveAuctionsResponse) {
    option (google.api.http).get = "/stateset/ssusd/v1/auctions";
  }
  
  // StabilityPool queries stability pool state
  rpc StabilityPool(QueryStabilityPoolRequest) returns (QueryStabilityPoolResponse) {
    option (google.api.http).get = "/stateset/ssusd/v1/stability";
  }
  
  // SystemMetrics queries system-wide metrics
  rpc SystemMetrics(QuerySystemMetricsRequest) returns (QuerySystemMetricsResponse) {
    option (google.api.http).get = "/stateset/ssusd/v1/metrics";
  }
  
  // SimulateMint simulates minting ssUSD
  rpc SimulateMint(QuerySimulateMintRequest) returns (QuerySimulateMintResponse) {
    option (google.api.http).get = "/stateset/ssusd/v1/simulate/mint";
  }
  
  // LiquidationPrice calculates liquidation price for a position
  rpc LiquidationPrice(QueryLiquidationPriceRequest) returns (QueryLiquidationPriceResponse) {
    option (google.api.http).get = "/stateset/ssusd/v1/liquidation_price/{owner}";
  }
}

// QueryParamsRequest is request for Params
message QueryParamsRequest {}

// QueryParamsResponse is response for Params
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryCollateralPositionRequest is request for CollateralPosition
message QueryCollateralPositionRequest {
  string owner = 1;
}

// QueryCollateralPositionResponse is response for CollateralPosition
message QueryCollateralPositionResponse {
  CollateralPosition position = 1;
}

// QueryAllPositionsRequest is request for AllPositions
message QueryAllPositionsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllPositionsResponse is response for AllPositions
message QueryAllPositionsResponse {
  repeated CollateralPosition positions = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAgentWalletRequest is request for AgentWallet
message QueryAgentWalletRequest {
  string agent_id = 1;
}

// QueryAgentWalletResponse is response for AgentWallet
message QueryAgentWalletResponse {
  AgentWallet wallet = 1;
}

// QueryAllAgentsRequest is request for AllAgents
message QueryAllAgentsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllAgentsResponse is response for AllAgents
message QueryAllAgentsResponse {
  repeated AgentWallet agents = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryOraclePriceRequest is request for OraclePrice
message QueryOraclePriceRequest {
  string asset = 1;
}

// QueryOraclePriceResponse is response for OraclePrice
message QueryOraclePriceResponse {
  OraclePrice price = 1;
  repeated OraclePrice price_history = 2; // Last 10 prices
}

// QueryActiveAuctionsRequest is request for ActiveAuctions
message QueryActiveAuctionsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryActiveAuctionsResponse is response for ActiveAuctions
message QueryActiveAuctionsResponse {
  repeated LiquidationAuction auctions = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryStabilityPoolRequest is request for StabilityPool
message QueryStabilityPoolRequest {}

// QueryStabilityPoolResponse is response for StabilityPool
message QueryStabilityPoolResponse {
  StabilityPool pool = 1 [(gogoproto.nullable) = false];
}

// QuerySystemMetricsRequest is request for SystemMetrics
message QuerySystemMetricsRequest {}

// QuerySystemMetricsResponse is response for SystemMetrics
message QuerySystemMetricsResponse {
  SystemMetrics metrics = 1 [(gogoproto.nullable) = false];
}

// QuerySimulateMintRequest simulates minting
message QuerySimulateMintRequest {
  string collateral_amount = 1;
  string mint_amount = 2;
}

// QuerySimulateMintResponse returns simulation results
message QuerySimulateMintResponse {
  string collateral_ratio = 1;
  string minting_fee = 2;
  string stability_fee_annual = 3;
  bool is_valid = 4;
  string error_message = 5;
}

// QueryLiquidationPriceRequest calculates liquidation price
message QueryLiquidationPriceRequest {
  string owner = 1;
}

// QueryLiquidationPriceResponse returns liquidation price
message QueryLiquidationPriceResponse {
  string liquidation_price = 1;
  string current_price = 2;
  string safety_margin = 3;
}