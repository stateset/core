syntax = "proto3";
package stateset.ssusd.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "stateset/ssusd/v1/params.proto";

option go_package = "github.com/stateset/core/x/ssusd/types";

// Msg defines the ssUSD Msg service
service Msg {
  // MintSSUSD mints new ssUSD tokens with STST collateral
  rpc MintSSUSD(MsgMintSSUSD) returns (MsgMintSSUSDResponse);
  
  // BurnSSUSD burns ssUSD tokens and returns collateral
  rpc BurnSSUSD(MsgBurnSSUSD) returns (MsgBurnSSUSDResponse);
  
  // AddCollateral adds more collateral to a position
  rpc AddCollateral(MsgAddCollateral) returns (MsgAddCollateralResponse);
  
  // WithdrawCollateral withdraws excess collateral
  rpc WithdrawCollateral(MsgWithdrawCollateral) returns (MsgWithdrawCollateralResponse);
  
  // Liquidate triggers liquidation of undercollateralized position
  rpc Liquidate(MsgLiquidate) returns (MsgLiquidateResponse);
  
  // CreateAgentWallet creates a new agent wallet
  rpc CreateAgentWallet(MsgCreateAgentWallet) returns (MsgCreateAgentWalletResponse);
  
  // AgentTransfer performs agent-to-agent transfer
  rpc AgentTransfer(MsgAgentTransfer) returns (MsgAgentTransferResponse);
  
  // UpdateOraclePrice updates oracle price feed
  rpc UpdateOraclePrice(MsgUpdateOraclePrice) returns (MsgUpdateOraclePriceResponse);
  
  // DepositStability deposits to stability pool
  rpc DepositStability(MsgDepositStability) returns (MsgDepositStabilityResponse);
  
  // WithdrawStability withdraws from stability pool
  rpc WithdrawStability(MsgWithdrawStability) returns (MsgWithdrawStabilityResponse);
  
  // BidAuction places bid on liquidation auction
  rpc BidAuction(MsgBidAuction) returns (MsgBidAuctionResponse);
  
  // UpdateParams updates module parameters (governance only)
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgMintSSUSD mints new ssUSD tokens
message MsgMintSSUSD {
  string minter = 1;
  cosmos.base.v1beta1.Coin collateral = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin mint_amount = 3 [(gogoproto.nullable) = false];
}

message MsgMintSSUSDResponse {
  string position_id = 1;
  cosmos.base.v1beta1.Coin minted = 2 [(gogoproto.nullable) = false];
  string collateral_ratio = 3;
}

// MsgBurnSSUSD burns ssUSD and returns collateral
message MsgBurnSSUSD {
  string burner = 1;
  cosmos.base.v1beta1.Coin burn_amount = 2 [(gogoproto.nullable) = false];
}

message MsgBurnSSUSDResponse {
  cosmos.base.v1beta1.Coin collateral_returned = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin remaining_debt = 2 [(gogoproto.nullable) = false];
}

// MsgAddCollateral adds collateral to position
message MsgAddCollateral {
  string owner = 1;
  cosmos.base.v1beta1.Coin collateral = 2 [(gogoproto.nullable) = false];
}

message MsgAddCollateralResponse {
  string new_collateral_ratio = 1;
  cosmos.base.v1beta1.Coin total_collateral = 2 [(gogoproto.nullable) = false];
}

// MsgWithdrawCollateral withdraws excess collateral
message MsgWithdrawCollateral {
  string owner = 1;
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

message MsgWithdrawCollateralResponse {
  string new_collateral_ratio = 1;
  cosmos.base.v1beta1.Coin remaining_collateral = 2 [(gogoproto.nullable) = false];
}

// MsgLiquidate triggers liquidation
message MsgLiquidate {
  string liquidator = 1;
  string debtor = 2;
}

message MsgLiquidateResponse {
  string auction_id = 1;
  cosmos.base.v1beta1.Coin collateral_auctioned = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin debt_recovered = 3 [(gogoproto.nullable) = false];
}

// MsgCreateAgentWallet creates agent wallet
message MsgCreateAgentWallet {
  string creator = 1;
  string agent_id = 2;
  repeated string authorized_signers = 3;
  cosmos.base.v1beta1.Coin initial_deposit = 4 [(gogoproto.nullable) = false];
}

message MsgCreateAgentWalletResponse {
  string wallet_address = 1;
  string agent_id = 2;
}

// MsgAgentTransfer performs agent-to-agent transfer
message MsgAgentTransfer {
  string from_agent = 1;
  string to_agent = 2;
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
  string memo = 4;
  string authorization_proof = 5; // Zero-knowledge proof for privacy
}

message MsgAgentTransferResponse {
  string transaction_id = 1;
  string fee_charged = 2;
  uint64 from_nonce = 3;
  uint64 to_nonce = 4;
}

// MsgUpdateOraclePrice updates price feed
message MsgUpdateOraclePrice {
  string oracle = 1;
  string asset = 2;
  string price = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string proof = 4; // Cryptographic proof of price validity
}

message MsgUpdateOraclePriceResponse {
  bool accepted = 1;
  string previous_price = 2;
}

// MsgDepositStability deposits to stability pool
message MsgDepositStability {
  string depositor = 1;
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

message MsgDepositStabilityResponse {
  cosmos.base.v1beta1.Coin total_deposit = 1 [(gogoproto.nullable) = false];
  string pool_share = 2;
}

// MsgWithdrawStability withdraws from stability pool
message MsgWithdrawStability {
  string withdrawer = 1;
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

message MsgWithdrawStabilityResponse {
  cosmos.base.v1beta1.Coin withdrawn = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin rewards = 2 [(gogoproto.nullable) = false];
}

// MsgBidAuction places bid on liquidation auction
message MsgBidAuction {
  string bidder = 1;
  string auction_id = 2;
  cosmos.base.v1beta1.Coin bid_amount = 3 [(gogoproto.nullable) = false];
}

message MsgBidAuctionResponse {
  bool success = 1;
  cosmos.base.v1beta1.Coin collateral_won = 2 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin refund = 3 [(gogoproto.nullable) = false];
}

// MsgUpdateParams updates module parameters
message MsgUpdateParams {
  string authority = 1;
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}