syntax = "proto3";
package stateset.xss.v1beta1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "stateset/xss/v1beta1/xss.proto";

option go_package = "github.com/stateset/core/x/xss/types";

// Msg defines the Msg service for STST token operations
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // StakeTokens stakes STST tokens to a validator
  rpc StakeTokens(MsgStakeTokens) returns (MsgStakeTokensResponse);
  
  // UnstakeTokens initiates unstaking of STST tokens
  rpc UnstakeTokens(MsgUnstakeTokens) returns (MsgUnstakeTokensResponse);
  
  // WithdrawStakingRewards withdraws accumulated staking rewards
  rpc WithdrawStakingRewards(MsgWithdrawStakingRewards) returns (MsgWithdrawStakingRewardsResponse);
  
  // CreateValidator creates a new STST validator
  rpc CreateValidator(MsgCreateValidator) returns (MsgCreateValidatorResponse);
  
  // EditValidator edits an existing STST validator
  rpc EditValidator(MsgEditValidator) returns (MsgEditValidatorResponse);
  
  // UnjailValidator unjails a jailed validator
  rpc UnjailValidator(MsgUnjailValidator) returns (MsgUnjailValidatorResponse);
  
  // UpdateParams updates the STST module parameters
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  
  // SlashValidator slashes a misbehaving validator
  rpc SlashValidator(MsgSlashValidator) returns (MsgSlashValidatorResponse);
  
  // ExecuteAgent processes agent execution and burns fees
  rpc ExecuteAgent(MsgExecuteAgent) returns (MsgExecuteAgentResponse);
  
  // BurnTokens burns STST tokens from treasury or DAO decisions
  rpc BurnTokens(MsgBurnTokens) returns (MsgBurnTokensResponse);
}

// MsgStakeTokens represents a message to stake STST tokens
message MsgStakeTokens {
  option (cosmos.msg.v1.signer) = "delegator_address";
  
  // delegator_address is the address of the delegator
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // validator_address is the address of the validator
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // amount is the amount of tokens to stake
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

// MsgStakeTokensResponse defines the response for staking tokens
message MsgStakeTokensResponse {}

// MsgUnstakeTokens represents a message to unstake STST tokens
message MsgUnstakeTokens {
  option (cosmos.msg.v1.signer) = "delegator_address";
  
  // delegator_address is the address of the delegator
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // validator_address is the address of the validator
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // amount is the amount of tokens to unstake
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

// MsgUnstakeTokensResponse defines the response for unstaking tokens
message MsgUnstakeTokensResponse {
  // completion_time is when the unstaking will complete
  google.protobuf.Timestamp completion_time = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

// MsgWithdrawStakingRewards represents a message to withdraw staking rewards
message MsgWithdrawStakingRewards {
  option (cosmos.msg.v1.signer) = "delegator_address";
  
  // delegator_address is the address of the delegator
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // validator_address is the address of the validator (optional, if empty withdraws from all)
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgWithdrawStakingRewardsResponse defines the response for withdrawing rewards
message MsgWithdrawStakingRewardsResponse {
  // amount is the amount of rewards withdrawn
  repeated cosmos.base.v1beta1.Coin amount = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgCreateValidator represents a message to create a new STST validator
message MsgCreateValidator {
  option (cosmos.msg.v1.signer) = "validator_address";
  
  // description is the validator description
  STSTValidatorDescription description = 1 [(gogoproto.nullable) = false];
  
  // commission is the validator commission
  STSTCommissionRates commission = 2 [(gogoproto.nullable) = false];
  
  // min_self_delegation is the minimum self delegation
  string min_self_delegation = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  
  // delegator_address is the address of the delegator
  string delegator_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // validator_address is the address of the validator
  string validator_address = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // pubkey is the consensus public key of the validator
  google.protobuf.Any pubkey = 6 [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
  
  // value is the initial stake amount
  cosmos.base.v1beta1.Coin value = 7 [(gogoproto.nullable) = false];
}

// MsgCreateValidatorResponse defines the response for creating a validator
message MsgCreateValidatorResponse {}

// MsgEditValidator represents a message to edit a validator
message MsgEditValidator {
  option (cosmos.msg.v1.signer) = "validator_address";
  
  // description is the updated validator description
  STSTValidatorDescription description = 1 [(gogoproto.nullable) = false];
  
  // validator_address is the address of the validator
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // commission_rate is the new commission rate
  string commission_rate = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"
  ];
  
  // min_self_delegation is the new minimum self delegation
  string min_self_delegation = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"
  ];
}

// MsgEditValidatorResponse defines the response for editing a validator
message MsgEditValidatorResponse {}

// MsgUnjailValidator represents a message to unjail a validator
message MsgUnjailValidator {
  option (cosmos.msg.v1.signer) = "validator_addr";
  
  // validator_addr is the address of the validator to unjail
  string validator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgUnjailValidatorResponse defines the response for unjailing a validator
message MsgUnjailValidatorResponse {}

// MsgUpdateParams represents a message to update module parameters
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  
  // authority is the address that controls the module
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // params are the new parameters
  STSTParams params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response for updating parameters
message MsgUpdateParamsResponse {}

// MsgSlashValidator represents a message to slash a validator
message MsgSlashValidator {
  option (cosmos.msg.v1.signer) = "authority";
  
  // authority is the address that can slash validators
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // validator_address is the address of the validator to slash
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // infraction_height is the height at which the infraction occurred
  int64 infraction_height = 3;
  
  // power is the voting power at the time of infraction
  int64 power = 4;
  
  // slash_fraction is the fraction to slash
  string slash_fraction = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// MsgSlashValidatorResponse defines the response for slashing a validator
message MsgSlashValidatorResponse {
  // slash_amount is the amount slashed
  string slash_amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgExecuteAgent represents a message to execute an AI agent workflow
message MsgExecuteAgent {
  option (cosmos.msg.v1.signer) = "executor";
  
  // executor is the address executing the agent
  string executor = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // agent_id is the unique identifier of the agent
  string agent_id = 2;
  
  // workflow_data is the encoded workflow to execute
  bytes workflow_data = 3;
  
  // execution_fee is the fee paid for execution
  cosmos.base.v1beta1.Coin execution_fee = 4 [(gogoproto.nullable) = false];
}

// MsgExecuteAgentResponse defines the response for agent execution
message MsgExecuteAgentResponse {
  // execution_result is the result of the agent execution
  bytes execution_result = 1;
  
  // gas_used is the amount of gas consumed
  uint64 gas_used = 2;
  
  // fees_burned is the amount of fees burned
  cosmos.base.v1beta1.Coin fees_burned = 3 [(gogoproto.nullable) = false];
}

// MsgBurnTokens represents a message to burn STST tokens
message MsgBurnTokens {
  option (cosmos.msg.v1.signer) = "authority";
  
  // authority is the address that can burn tokens (treasury or DAO)
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // amount is the amount of tokens to burn
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
  
  // reason is the reason for burning tokens
  string reason = 3;
}

// MsgBurnTokensResponse defines the response for burning tokens
message MsgBurnTokensResponse {
  // burned_amount is the amount of tokens burned
  cosmos.base.v1beta1.Coin burned_amount = 1 [(gogoproto.nullable) = false];
}