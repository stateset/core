// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agreement/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetSentAgreementRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSentAgreementRequest) Reset()         { *m = QueryGetSentAgreementRequest{} }
func (m *QueryGetSentAgreementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentAgreementRequest) ProtoMessage()    {}
func (*QueryGetSentAgreementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{0}
}
func (m *QueryGetSentAgreementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentAgreementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentAgreementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentAgreementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentAgreementRequest.Merge(m, src)
}
func (m *QueryGetSentAgreementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentAgreementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentAgreementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentAgreementRequest proto.InternalMessageInfo

func (m *QueryGetSentAgreementRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSentAgreementResponse struct {
	SentAgreement SentAgreement `protobuf:"bytes,1,opt,name=SentAgreement,proto3" json:"SentAgreement"`
}

func (m *QueryGetSentAgreementResponse) Reset()         { *m = QueryGetSentAgreementResponse{} }
func (m *QueryGetSentAgreementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentAgreementResponse) ProtoMessage()    {}
func (*QueryGetSentAgreementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{1}
}
func (m *QueryGetSentAgreementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentAgreementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentAgreementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentAgreementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentAgreementResponse.Merge(m, src)
}
func (m *QueryGetSentAgreementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentAgreementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentAgreementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentAgreementResponse proto.InternalMessageInfo

func (m *QueryGetSentAgreementResponse) GetSentAgreement() SentAgreement {
	if m != nil {
		return m.SentAgreement
	}
	return SentAgreement{}
}

type QueryAllSentAgreementRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSentAgreementRequest) Reset()         { *m = QueryAllSentAgreementRequest{} }
func (m *QueryAllSentAgreementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSentAgreementRequest) ProtoMessage()    {}
func (*QueryAllSentAgreementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{2}
}
func (m *QueryAllSentAgreementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSentAgreementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSentAgreementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSentAgreementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSentAgreementRequest.Merge(m, src)
}
func (m *QueryAllSentAgreementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSentAgreementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSentAgreementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSentAgreementRequest proto.InternalMessageInfo

func (m *QueryAllSentAgreementRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSentAgreementResponse struct {
	SentAgreement []SentAgreement     `protobuf:"bytes,1,rep,name=SentAgreement,proto3" json:"SentAgreement"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSentAgreementResponse) Reset()         { *m = QueryAllSentAgreementResponse{} }
func (m *QueryAllSentAgreementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSentAgreementResponse) ProtoMessage()    {}
func (*QueryAllSentAgreementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{3}
}
func (m *QueryAllSentAgreementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSentAgreementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSentAgreementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSentAgreementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSentAgreementResponse.Merge(m, src)
}
func (m *QueryAllSentAgreementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSentAgreementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSentAgreementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSentAgreementResponse proto.InternalMessageInfo

func (m *QueryAllSentAgreementResponse) GetSentAgreement() []SentAgreement {
	if m != nil {
		return m.SentAgreement
	}
	return nil
}

func (m *QueryAllSentAgreementResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTimedoutAgreementRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTimedoutAgreementRequest) Reset()         { *m = QueryGetTimedoutAgreementRequest{} }
func (m *QueryGetTimedoutAgreementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimedoutAgreementRequest) ProtoMessage()    {}
func (*QueryGetTimedoutAgreementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{4}
}
func (m *QueryGetTimedoutAgreementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimedoutAgreementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimedoutAgreementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimedoutAgreementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimedoutAgreementRequest.Merge(m, src)
}
func (m *QueryGetTimedoutAgreementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimedoutAgreementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimedoutAgreementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimedoutAgreementRequest proto.InternalMessageInfo

func (m *QueryGetTimedoutAgreementRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTimedoutAgreementResponse struct {
	TimedoutAgreement TimedoutAgreement `protobuf:"bytes,1,opt,name=TimedoutAgreement,proto3" json:"TimedoutAgreement"`
}

func (m *QueryGetTimedoutAgreementResponse) Reset()         { *m = QueryGetTimedoutAgreementResponse{} }
func (m *QueryGetTimedoutAgreementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimedoutAgreementResponse) ProtoMessage()    {}
func (*QueryGetTimedoutAgreementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{5}
}
func (m *QueryGetTimedoutAgreementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimedoutAgreementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimedoutAgreementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimedoutAgreementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimedoutAgreementResponse.Merge(m, src)
}
func (m *QueryGetTimedoutAgreementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimedoutAgreementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimedoutAgreementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimedoutAgreementResponse proto.InternalMessageInfo

func (m *QueryGetTimedoutAgreementResponse) GetTimedoutAgreement() TimedoutAgreement {
	if m != nil {
		return m.TimedoutAgreement
	}
	return TimedoutAgreement{}
}

type QueryAllTimedoutAgreementRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimedoutAgreementRequest) Reset()         { *m = QueryAllTimedoutAgreementRequest{} }
func (m *QueryAllTimedoutAgreementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimedoutAgreementRequest) ProtoMessage()    {}
func (*QueryAllTimedoutAgreementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{6}
}
func (m *QueryAllTimedoutAgreementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimedoutAgreementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimedoutAgreementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimedoutAgreementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimedoutAgreementRequest.Merge(m, src)
}
func (m *QueryAllTimedoutAgreementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimedoutAgreementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimedoutAgreementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimedoutAgreementRequest proto.InternalMessageInfo

func (m *QueryAllTimedoutAgreementRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTimedoutAgreementResponse struct {
	TimedoutAgreement []TimedoutAgreement `protobuf:"bytes,1,rep,name=TimedoutAgreement,proto3" json:"TimedoutAgreement"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimedoutAgreementResponse) Reset()         { *m = QueryAllTimedoutAgreementResponse{} }
func (m *QueryAllTimedoutAgreementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimedoutAgreementResponse) ProtoMessage()    {}
func (*QueryAllTimedoutAgreementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{7}
}
func (m *QueryAllTimedoutAgreementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimedoutAgreementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimedoutAgreementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimedoutAgreementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimedoutAgreementResponse.Merge(m, src)
}
func (m *QueryAllTimedoutAgreementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimedoutAgreementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimedoutAgreementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimedoutAgreementResponse proto.InternalMessageInfo

func (m *QueryAllTimedoutAgreementResponse) GetTimedoutAgreement() []TimedoutAgreement {
	if m != nil {
		return m.TimedoutAgreement
	}
	return nil
}

func (m *QueryAllTimedoutAgreementResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAgreementRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAgreementRequest) Reset()         { *m = QueryGetAgreementRequest{} }
func (m *QueryGetAgreementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAgreementRequest) ProtoMessage()    {}
func (*QueryGetAgreementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{8}
}
func (m *QueryGetAgreementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAgreementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAgreementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAgreementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAgreementRequest.Merge(m, src)
}
func (m *QueryGetAgreementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAgreementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAgreementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAgreementRequest proto.InternalMessageInfo

func (m *QueryGetAgreementRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAgreementResponse struct {
	Agreement Agreement `protobuf:"bytes,1,opt,name=Agreement,proto3" json:"Agreement"`
}

func (m *QueryGetAgreementResponse) Reset()         { *m = QueryGetAgreementResponse{} }
func (m *QueryGetAgreementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAgreementResponse) ProtoMessage()    {}
func (*QueryGetAgreementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{9}
}
func (m *QueryGetAgreementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAgreementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAgreementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAgreementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAgreementResponse.Merge(m, src)
}
func (m *QueryGetAgreementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAgreementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAgreementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAgreementResponse proto.InternalMessageInfo

func (m *QueryGetAgreementResponse) GetAgreement() Agreement {
	if m != nil {
		return m.Agreement
	}
	return Agreement{}
}

type QueryAllAgreementRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAgreementRequest) Reset()         { *m = QueryAllAgreementRequest{} }
func (m *QueryAllAgreementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAgreementRequest) ProtoMessage()    {}
func (*QueryAllAgreementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{10}
}
func (m *QueryAllAgreementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAgreementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAgreementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAgreementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAgreementRequest.Merge(m, src)
}
func (m *QueryAllAgreementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAgreementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAgreementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAgreementRequest proto.InternalMessageInfo

func (m *QueryAllAgreementRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAgreementResponse struct {
	Agreement  []Agreement         `protobuf:"bytes,1,rep,name=Agreement,proto3" json:"Agreement"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAgreementResponse) Reset()         { *m = QueryAllAgreementResponse{} }
func (m *QueryAllAgreementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAgreementResponse) ProtoMessage()    {}
func (*QueryAllAgreementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b8df6a0ad45e9fd, []int{11}
}
func (m *QueryAllAgreementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAgreementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAgreementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAgreementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAgreementResponse.Merge(m, src)
}
func (m *QueryAllAgreementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAgreementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAgreementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAgreementResponse proto.InternalMessageInfo

func (m *QueryAllAgreementResponse) GetAgreement() []Agreement {
	if m != nil {
		return m.Agreement
	}
	return nil
}

func (m *QueryAllAgreementResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetSentAgreementRequest)(nil), "stateset.core.agreement.QueryGetSentAgreementRequest")
	proto.RegisterType((*QueryGetSentAgreementResponse)(nil), "stateset.core.agreement.QueryGetSentAgreementResponse")
	proto.RegisterType((*QueryAllSentAgreementRequest)(nil), "stateset.core.agreement.QueryAllSentAgreementRequest")
	proto.RegisterType((*QueryAllSentAgreementResponse)(nil), "stateset.core.agreement.QueryAllSentAgreementResponse")
	proto.RegisterType((*QueryGetTimedoutAgreementRequest)(nil), "stateset.core.agreement.QueryGetTimedoutAgreementRequest")
	proto.RegisterType((*QueryGetTimedoutAgreementResponse)(nil), "stateset.core.agreement.QueryGetTimedoutAgreementResponse")
	proto.RegisterType((*QueryAllTimedoutAgreementRequest)(nil), "stateset.core.agreement.QueryAllTimedoutAgreementRequest")
	proto.RegisterType((*QueryAllTimedoutAgreementResponse)(nil), "stateset.core.agreement.QueryAllTimedoutAgreementResponse")
	proto.RegisterType((*QueryGetAgreementRequest)(nil), "stateset.core.agreement.QueryGetAgreementRequest")
	proto.RegisterType((*QueryGetAgreementResponse)(nil), "stateset.core.agreement.QueryGetAgreementResponse")
	proto.RegisterType((*QueryAllAgreementRequest)(nil), "stateset.core.agreement.QueryAllAgreementRequest")
	proto.RegisterType((*QueryAllAgreementResponse)(nil), "stateset.core.agreement.QueryAllAgreementResponse")
}

func init() { proto.RegisterFile("agreement/query.proto", fileDescriptor_1b8df6a0ad45e9fd) }

var fileDescriptor_1b8df6a0ad45e9fd = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xcb, 0x6e, 0x13, 0x3f,
	0x14, 0xc6, 0xe3, 0xb4, 0xff, 0xbf, 0xc0, 0x5c, 0x04, 0x56, 0x11, 0x6d, 0x54, 0x86, 0x62, 0xa1,
	0xb6, 0x0c, 0x60, 0x2b, 0xa9, 0x00, 0x95, 0x5d, 0x2a, 0xd4, 0x6e, 0x21, 0xb0, 0x62, 0x01, 0x9a,
	0x24, 0x66, 0x18, 0x34, 0x19, 0xa7, 0xb1, 0x83, 0xa8, 0x10, 0x1b, 0x78, 0x01, 0x24, 0x9e, 0x00,
	0xb1, 0x65, 0x83, 0xd8, 0xb2, 0x41, 0x08, 0xa9, 0x0b, 0x16, 0x95, 0xd8, 0xb0, 0x42, 0x28, 0xe1,
	0x41, 0x50, 0x3c, 0xce, 0x65, 0x2e, 0xce, 0x34, 0x21, 0xec, 0xa6, 0xf5, 0xf9, 0x8e, 0x7f, 0xdf,
	0x77, 0x32, 0x27, 0x81, 0x67, 0x1c, 0xb7, 0xc5, 0x58, 0x83, 0x05, 0x92, 0xee, 0xb6, 0x59, 0x6b,
	0x8f, 0x34, 0x5b, 0x5c, 0x72, 0x74, 0x56, 0x48, 0x47, 0x32, 0xc1, 0x24, 0xa9, 0xf1, 0x16, 0x23,
	0x83, 0xa2, 0xc2, 0xb2, 0xcb, 0xb9, 0xeb, 0x33, 0xea, 0x34, 0x3d, 0xea, 0x04, 0x01, 0x97, 0x8e,
	0xf4, 0x78, 0x20, 0x42, 0x59, 0xc1, 0xae, 0x71, 0xd1, 0xe0, 0x82, 0x56, 0x1d, 0xc1, 0xc2, 0x7e,
	0xf4, 0x69, 0xb1, 0xca, 0xa4, 0x53, 0xa4, 0x4d, 0xc7, 0xf5, 0x02, 0x55, 0xac, 0x6b, 0xad, 0xe1,
	0xcd, 0x82, 0x05, 0xf2, 0xe1, 0xe0, 0x4f, 0x7d, 0x8e, 0x87, 0xe7, 0xd2, 0x6b, 0xb0, 0x3a, 0x6f,
	0x27, 0x6b, 0x96, 0x86, 0x35, 0xf1, 0xa3, 0x05, 0x97, 0xbb, 0x5c, 0x3d, 0xd2, 0xde, 0x53, 0xf8,
	0x5f, 0x4c, 0xe0, 0xf2, 0x9d, 0x1e, 0xd6, 0x0e, 0x93, 0x77, 0x59, 0x20, 0xcb, 0x7d, 0x51, 0x85,
	0xed, 0xb6, 0x99, 0x90, 0xe8, 0x24, 0xcc, 0x7b, 0xf5, 0x45, 0xb0, 0x02, 0xd6, 0xe7, 0x2b, 0x79,
	0xaf, 0x8e, 0x05, 0x3c, 0x67, 0xa8, 0x17, 0x4d, 0x1e, 0x08, 0x86, 0x2a, 0xf0, 0x44, 0xe4, 0x40,
	0x69, 0x8f, 0x95, 0x56, 0x89, 0x21, 0x40, 0x12, 0xa9, 0xde, 0x9a, 0xdf, 0xff, 0x79, 0x3e, 0x57,
	0x89, 0xb6, 0xc0, 0x8f, 0x34, 0x64, 0xd9, 0xf7, 0x53, 0x21, 0xb7, 0x21, 0x1c, 0xa6, 0x39, 0xb8,
	0x30, 0x8c, 0x9e, 0xf4, 0xa2, 0x27, 0xe1, 0x28, 0x75, 0xf4, 0xe4, 0xb6, 0xe3, 0x32, 0xad, 0xad,
	0x8c, 0x28, 0xf1, 0x27, 0xa0, 0xdd, 0x25, 0x2f, 0x32, 0xbb, 0x9b, 0xfb, 0x4b, 0x77, 0x68, 0x27,
	0x42, 0x9f, 0x57, 0xf4, 0x6b, 0x99, 0xf4, 0x21, 0x50, 0x04, 0xbf, 0x04, 0x57, 0xfa, 0xb3, 0xb9,
	0xa7, 0x3f, 0x20, 0x99, 0xf3, 0x7c, 0x05, 0xe0, 0x85, 0x31, 0x22, 0x6d, 0xfb, 0x01, 0x3c, 0x9d,
	0x38, 0xd4, 0x39, 0xdb, 0x46, 0xeb, 0x09, 0x85, 0xb6, 0x9f, 0x6c, 0x85, 0x9f, 0x68, 0xf2, 0xb2,
	0xef, 0x1b, 0xc9, 0x67, 0x35, 0xe4, 0x6f, 0x7d, 0xc7, 0xe9, 0x97, 0x8d, 0x77, 0x3c, 0x37, 0x23,
	0xc7, 0xb3, 0x1b, 0xba, 0x0d, 0x17, 0xfb, 0xf3, 0xcb, 0x1c, 0x76, 0x0d, 0x2e, 0xa5, 0xd4, 0x6a,
	0xc7, 0xdb, 0xf0, 0x68, 0x7c, 0xb6, 0xd8, 0xe8, 0x34, 0xee, 0x70, 0x28, 0xc5, 0x55, 0x0d, 0x54,
	0xf6, 0xfd, 0x7f, 0x36, 0xc3, 0xf7, 0x40, 0x3b, 0x89, 0x5e, 0x92, 0xee, 0x64, 0x6e, 0x4a, 0x27,
	0x33, 0x9b, 0x51, 0xe9, 0xeb, 0x11, 0xf8, 0x9f, 0xc2, 0x45, 0x1f, 0x41, 0x6c, 0x81, 0xa0, 0x6b,
	0x46, 0xb2, 0x71, 0x7b, 0xb9, 0x70, 0x7d, 0x52, 0x59, 0x88, 0x85, 0x37, 0x5e, 0x7e, 0xff, 0xfd,
	0x26, 0x7f, 0x15, 0x5d, 0xa6, 0x7d, 0x3d, 0xed, 0xe9, 0x69, 0xf4, 0xbb, 0x67, 0xa0, 0xa3, 0xcf,
	0xbd, 0xfa, 0x0b, 0xf4, 0x01, 0xc0, 0x53, 0x91, 0x76, 0x65, 0xdf, 0xcf, 0x02, 0x37, 0xec, 0xea,
	0x2c, 0x70, 0xd3, 0xe6, 0xc5, 0x44, 0x81, 0xaf, 0xa3, 0xd5, 0xc3, 0x81, 0xa3, 0x2f, 0x20, 0xe5,
	0x0d, 0x46, 0x9b, 0x99, 0xb1, 0x99, 0xf6, 0x4f, 0xe1, 0xe6, 0x34, 0x52, 0x0d, 0x7f, 0x43, 0xc1,
	0x17, 0x11, 0x35, 0xc2, 0xcb, 0xb8, 0x36, 0x4c, 0xfe, 0x33, 0x80, 0x0b, 0x89, 0xb6, 0xbd, 0xf4,
	0x37, 0x33, 0x63, 0x9c, 0xd6, 0xc8, 0xb8, 0xb5, 0x88, 0x4b, 0xca, 0xc8, 0x15, 0x64, 0x1f, 0xde,
	0x08, 0x7a, 0x07, 0x46, 0xde, 0x47, 0x54, 0xcc, 0x8c, 0x31, 0x01, 0x5c, 0x9a, 0x44, 0xa2, 0x41,
	0xa9, 0x02, 0xbd, 0x84, 0xd6, 0x8c, 0xa0, 0x4e, 0x34, 0xe9, 0xb7, 0x00, 0x1e, 0x8f, 0x24, 0x5c,
	0xcc, 0x8c, 0x69, 0x52, 0xd0, 0xb4, 0x65, 0x85, 0x6d, 0x05, 0x7a, 0x11, 0xe1, 0x6c, 0xd0, 0xad,
	0x5b, 0xfb, 0x1d, 0x0b, 0x1c, 0x74, 0x2c, 0xf0, 0xab, 0x63, 0x81, 0xd7, 0x5d, 0x2b, 0x77, 0xd0,
	0xb5, 0x72, 0x3f, 0xba, 0x56, 0xee, 0xbe, 0xed, 0x7a, 0xf2, 0x71, 0xbb, 0x4a, 0x6a, 0xbc, 0x11,
	0xeb, 0xf3, 0x6c, 0x74, 0x36, 0x7b, 0x4d, 0x26, 0xaa, 0xff, 0xab, 0x5f, 0x7e, 0x1b, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xb1, 0x98, 0x75, 0xa2, 0xea, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a sentAgreement by id.
	SentAgreement(ctx context.Context, in *QueryGetSentAgreementRequest, opts ...grpc.CallOption) (*QueryGetSentAgreementResponse, error)
	// Queries a list of sentAgreement items.
	SentAgreementAll(ctx context.Context, in *QueryAllSentAgreementRequest, opts ...grpc.CallOption) (*QueryAllSentAgreementResponse, error)
	// Queries a timedoutAgreement by id.
	TimedoutAgreement(ctx context.Context, in *QueryGetTimedoutAgreementRequest, opts ...grpc.CallOption) (*QueryGetTimedoutAgreementResponse, error)
	// Queries a list of timedoutAgreement items.
	TimedoutAgreementAll(ctx context.Context, in *QueryAllTimedoutAgreementRequest, opts ...grpc.CallOption) (*QueryAllTimedoutAgreementResponse, error)
	// Queries a agreement by id.
	Agreement(ctx context.Context, in *QueryGetAgreementRequest, opts ...grpc.CallOption) (*QueryGetAgreementResponse, error)
	// Queries a list of agreement items.
	AgreementAll(ctx context.Context, in *QueryAllAgreementRequest, opts ...grpc.CallOption) (*QueryAllAgreementResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) SentAgreement(ctx context.Context, in *QueryGetSentAgreementRequest, opts ...grpc.CallOption) (*QueryGetSentAgreementResponse, error) {
	out := new(QueryGetSentAgreementResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.agreement.Query/SentAgreement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SentAgreementAll(ctx context.Context, in *QueryAllSentAgreementRequest, opts ...grpc.CallOption) (*QueryAllSentAgreementResponse, error) {
	out := new(QueryAllSentAgreementResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.agreement.Query/SentAgreementAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimedoutAgreement(ctx context.Context, in *QueryGetTimedoutAgreementRequest, opts ...grpc.CallOption) (*QueryGetTimedoutAgreementResponse, error) {
	out := new(QueryGetTimedoutAgreementResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.agreement.Query/TimedoutAgreement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimedoutAgreementAll(ctx context.Context, in *QueryAllTimedoutAgreementRequest, opts ...grpc.CallOption) (*QueryAllTimedoutAgreementResponse, error) {
	out := new(QueryAllTimedoutAgreementResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.agreement.Query/TimedoutAgreementAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Agreement(ctx context.Context, in *QueryGetAgreementRequest, opts ...grpc.CallOption) (*QueryGetAgreementResponse, error) {
	out := new(QueryGetAgreementResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.agreement.Query/Agreement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AgreementAll(ctx context.Context, in *QueryAllAgreementRequest, opts ...grpc.CallOption) (*QueryAllAgreementResponse, error) {
	out := new(QueryAllAgreementResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.agreement.Query/AgreementAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a sentAgreement by id.
	SentAgreement(context.Context, *QueryGetSentAgreementRequest) (*QueryGetSentAgreementResponse, error)
	// Queries a list of sentAgreement items.
	SentAgreementAll(context.Context, *QueryAllSentAgreementRequest) (*QueryAllSentAgreementResponse, error)
	// Queries a timedoutAgreement by id.
	TimedoutAgreement(context.Context, *QueryGetTimedoutAgreementRequest) (*QueryGetTimedoutAgreementResponse, error)
	// Queries a list of timedoutAgreement items.
	TimedoutAgreementAll(context.Context, *QueryAllTimedoutAgreementRequest) (*QueryAllTimedoutAgreementResponse, error)
	// Queries a agreement by id.
	Agreement(context.Context, *QueryGetAgreementRequest) (*QueryGetAgreementResponse, error)
	// Queries a list of agreement items.
	AgreementAll(context.Context, *QueryAllAgreementRequest) (*QueryAllAgreementResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) SentAgreement(ctx context.Context, req *QueryGetSentAgreementRequest) (*QueryGetSentAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentAgreement not implemented")
}
func (*UnimplementedQueryServer) SentAgreementAll(ctx context.Context, req *QueryAllSentAgreementRequest) (*QueryAllSentAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentAgreementAll not implemented")
}
func (*UnimplementedQueryServer) TimedoutAgreement(ctx context.Context, req *QueryGetTimedoutAgreementRequest) (*QueryGetTimedoutAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimedoutAgreement not implemented")
}
func (*UnimplementedQueryServer) TimedoutAgreementAll(ctx context.Context, req *QueryAllTimedoutAgreementRequest) (*QueryAllTimedoutAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimedoutAgreementAll not implemented")
}
func (*UnimplementedQueryServer) Agreement(ctx context.Context, req *QueryGetAgreementRequest) (*QueryGetAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Agreement not implemented")
}
func (*UnimplementedQueryServer) AgreementAll(ctx context.Context, req *QueryAllAgreementRequest) (*QueryAllAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreementAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_SentAgreement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSentAgreementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentAgreement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.agreement.Query/SentAgreement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentAgreement(ctx, req.(*QueryGetSentAgreementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SentAgreementAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSentAgreementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentAgreementAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.agreement.Query/SentAgreementAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentAgreementAll(ctx, req.(*QueryAllSentAgreementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimedoutAgreement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimedoutAgreementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimedoutAgreement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.agreement.Query/TimedoutAgreement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimedoutAgreement(ctx, req.(*QueryGetTimedoutAgreementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimedoutAgreementAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTimedoutAgreementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimedoutAgreementAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.agreement.Query/TimedoutAgreementAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimedoutAgreementAll(ctx, req.(*QueryAllTimedoutAgreementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Agreement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAgreementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Agreement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.agreement.Query/Agreement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Agreement(ctx, req.(*QueryGetAgreementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AgreementAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAgreementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AgreementAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.agreement.Query/AgreementAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AgreementAll(ctx, req.(*QueryAllAgreementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stateset.core.agreement.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SentAgreement",
			Handler:    _Query_SentAgreement_Handler,
		},
		{
			MethodName: "SentAgreementAll",
			Handler:    _Query_SentAgreementAll_Handler,
		},
		{
			MethodName: "TimedoutAgreement",
			Handler:    _Query_TimedoutAgreement_Handler,
		},
		{
			MethodName: "TimedoutAgreementAll",
			Handler:    _Query_TimedoutAgreementAll_Handler,
		},
		{
			MethodName: "Agreement",
			Handler:    _Query_Agreement_Handler,
		},
		{
			MethodName: "AgreementAll",
			Handler:    _Query_AgreementAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agreement/query.proto",
}

func (m *QueryGetSentAgreementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentAgreementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentAgreementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentAgreementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentAgreementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentAgreementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SentAgreement.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSentAgreementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSentAgreementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSentAgreementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSentAgreementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSentAgreementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSentAgreementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SentAgreement) > 0 {
		for iNdEx := len(m.SentAgreement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SentAgreement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimedoutAgreementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimedoutAgreementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimedoutAgreementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimedoutAgreementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimedoutAgreementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimedoutAgreementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TimedoutAgreement.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTimedoutAgreementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimedoutAgreementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimedoutAgreementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTimedoutAgreementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimedoutAgreementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimedoutAgreementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TimedoutAgreement) > 0 {
		for iNdEx := len(m.TimedoutAgreement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimedoutAgreement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAgreementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAgreementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAgreementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAgreementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAgreementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAgreementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Agreement.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAgreementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAgreementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAgreementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAgreementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAgreementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAgreementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Agreement) > 0 {
		for iNdEx := len(m.Agreement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Agreement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetSentAgreementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSentAgreementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SentAgreement.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSentAgreementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSentAgreementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SentAgreement) > 0 {
		for _, e := range m.SentAgreement {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTimedoutAgreementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTimedoutAgreementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TimedoutAgreement.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTimedoutAgreementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTimedoutAgreementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TimedoutAgreement) > 0 {
		for _, e := range m.TimedoutAgreement {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAgreementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAgreementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Agreement.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAgreementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAgreementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Agreement) > 0 {
		for _, e := range m.Agreement {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetSentAgreementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentAgreementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentAgreementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentAgreementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentAgreementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentAgreementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAgreement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SentAgreement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSentAgreementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSentAgreementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSentAgreementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSentAgreementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSentAgreementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSentAgreementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAgreement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentAgreement = append(m.SentAgreement, SentAgreement{})
			if err := m.SentAgreement[len(m.SentAgreement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimedoutAgreementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimedoutAgreementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimedoutAgreementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimedoutAgreementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimedoutAgreementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimedoutAgreementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedoutAgreement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimedoutAgreement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimedoutAgreementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimedoutAgreementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimedoutAgreementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimedoutAgreementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimedoutAgreementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimedoutAgreementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedoutAgreement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimedoutAgreement = append(m.TimedoutAgreement, TimedoutAgreement{})
			if err := m.TimedoutAgreement[len(m.TimedoutAgreement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAgreementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAgreementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAgreementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAgreementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAgreementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAgreementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agreement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Agreement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAgreementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAgreementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAgreementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAgreementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAgreementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAgreementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agreement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agreement = append(m.Agreement, Agreement{})
			if err := m.Agreement[len(m.Agreement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
