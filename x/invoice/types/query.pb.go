// +build !nogrpc
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: invoice/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	grpc1 "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetInvoiceRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetInvoiceRequest) Reset()         { *m = QueryGetInvoiceRequest{} }
func (m *QueryGetInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInvoiceRequest) ProtoMessage()    {}
func (*QueryGetInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{0}
}
func (m *QueryGetInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInvoiceRequest.Merge(m, src)
}
func (m *QueryGetInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInvoiceRequest proto.InternalMessageInfo

func (m *QueryGetInvoiceRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetInvoiceResponse struct {
	Invoice Invoice `protobuf:"bytes,1,opt,name=Invoice,proto3" json:"Invoice"`
}

func (m *QueryGetInvoiceResponse) Reset()         { *m = QueryGetInvoiceResponse{} }
func (m *QueryGetInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInvoiceResponse) ProtoMessage()    {}
func (*QueryGetInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{1}
}
func (m *QueryGetInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInvoiceResponse.Merge(m, src)
}
func (m *QueryGetInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInvoiceResponse proto.InternalMessageInfo

func (m *QueryGetInvoiceResponse) GetInvoice() Invoice {
	if m != nil {
		return m.Invoice
	}
	return Invoice{}
}

type QueryAllInvoiceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInvoiceRequest) Reset()         { *m = QueryAllInvoiceRequest{} }
func (m *QueryAllInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInvoiceRequest) ProtoMessage()    {}
func (*QueryAllInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{2}
}
func (m *QueryAllInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInvoiceRequest.Merge(m, src)
}
func (m *QueryAllInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInvoiceRequest proto.InternalMessageInfo

func (m *QueryAllInvoiceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInvoiceResponse struct {
	Invoice    []Invoice           `protobuf:"bytes,1,rep,name=Invoice,proto3" json:"Invoice"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInvoiceResponse) Reset()         { *m = QueryAllInvoiceResponse{} }
func (m *QueryAllInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInvoiceResponse) ProtoMessage()    {}
func (*QueryAllInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{3}
}
func (m *QueryAllInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInvoiceResponse.Merge(m, src)
}
func (m *QueryAllInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInvoiceResponse proto.InternalMessageInfo

func (m *QueryAllInvoiceResponse) GetInvoice() []Invoice {
	if m != nil {
		return m.Invoice
	}
	return nil
}

func (m *QueryAllInvoiceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSentInvoiceRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSentInvoiceRequest) Reset()         { *m = QueryGetSentInvoiceRequest{} }
func (m *QueryGetSentInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentInvoiceRequest) ProtoMessage()    {}
func (*QueryGetSentInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{4}
}
func (m *QueryGetSentInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentInvoiceRequest.Merge(m, src)
}
func (m *QueryGetSentInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentInvoiceRequest proto.InternalMessageInfo

func (m *QueryGetSentInvoiceRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSentInvoiceResponse struct {
	SentInvoice SentInvoice `protobuf:"bytes,1,opt,name=SentInvoice,proto3" json:"SentInvoice"`
}

func (m *QueryGetSentInvoiceResponse) Reset()         { *m = QueryGetSentInvoiceResponse{} }
func (m *QueryGetSentInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentInvoiceResponse) ProtoMessage()    {}
func (*QueryGetSentInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{5}
}
func (m *QueryGetSentInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentInvoiceResponse.Merge(m, src)
}
func (m *QueryGetSentInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentInvoiceResponse proto.InternalMessageInfo

func (m *QueryGetSentInvoiceResponse) GetSentInvoice() SentInvoice {
	if m != nil {
		return m.SentInvoice
	}
	return SentInvoice{}
}

type QueryAllSentInvoiceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSentInvoiceRequest) Reset()         { *m = QueryAllSentInvoiceRequest{} }
func (m *QueryAllSentInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSentInvoiceRequest) ProtoMessage()    {}
func (*QueryAllSentInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{6}
}
func (m *QueryAllSentInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSentInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSentInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSentInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSentInvoiceRequest.Merge(m, src)
}
func (m *QueryAllSentInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSentInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSentInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSentInvoiceRequest proto.InternalMessageInfo

func (m *QueryAllSentInvoiceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSentInvoiceResponse struct {
	SentInvoice []SentInvoice       `protobuf:"bytes,1,rep,name=SentInvoice,proto3" json:"SentInvoice"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSentInvoiceResponse) Reset()         { *m = QueryAllSentInvoiceResponse{} }
func (m *QueryAllSentInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSentInvoiceResponse) ProtoMessage()    {}
func (*QueryAllSentInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{7}
}
func (m *QueryAllSentInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSentInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSentInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSentInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSentInvoiceResponse.Merge(m, src)
}
func (m *QueryAllSentInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSentInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSentInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSentInvoiceResponse proto.InternalMessageInfo

func (m *QueryAllSentInvoiceResponse) GetSentInvoice() []SentInvoice {
	if m != nil {
		return m.SentInvoice
	}
	return nil
}

func (m *QueryAllSentInvoiceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTimedoutInvoiceRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTimedoutInvoiceRequest) Reset()         { *m = QueryGetTimedoutInvoiceRequest{} }
func (m *QueryGetTimedoutInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimedoutInvoiceRequest) ProtoMessage()    {}
func (*QueryGetTimedoutInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{8}
}
func (m *QueryGetTimedoutInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimedoutInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimedoutInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimedoutInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimedoutInvoiceRequest.Merge(m, src)
}
func (m *QueryGetTimedoutInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimedoutInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimedoutInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimedoutInvoiceRequest proto.InternalMessageInfo

func (m *QueryGetTimedoutInvoiceRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTimedoutInvoiceResponse struct {
	TimedoutInvoice TimedoutInvoice `protobuf:"bytes,1,opt,name=TimedoutInvoice,proto3" json:"TimedoutInvoice"`
}

func (m *QueryGetTimedoutInvoiceResponse) Reset()         { *m = QueryGetTimedoutInvoiceResponse{} }
func (m *QueryGetTimedoutInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimedoutInvoiceResponse) ProtoMessage()    {}
func (*QueryGetTimedoutInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{9}
}
func (m *QueryGetTimedoutInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimedoutInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimedoutInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimedoutInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimedoutInvoiceResponse.Merge(m, src)
}
func (m *QueryGetTimedoutInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimedoutInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimedoutInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimedoutInvoiceResponse proto.InternalMessageInfo

func (m *QueryGetTimedoutInvoiceResponse) GetTimedoutInvoice() TimedoutInvoice {
	if m != nil {
		return m.TimedoutInvoice
	}
	return TimedoutInvoice{}
}

type QueryAllTimedoutInvoiceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimedoutInvoiceRequest) Reset()         { *m = QueryAllTimedoutInvoiceRequest{} }
func (m *QueryAllTimedoutInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimedoutInvoiceRequest) ProtoMessage()    {}
func (*QueryAllTimedoutInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{10}
}
func (m *QueryAllTimedoutInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimedoutInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimedoutInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimedoutInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimedoutInvoiceRequest.Merge(m, src)
}
func (m *QueryAllTimedoutInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimedoutInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimedoutInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimedoutInvoiceRequest proto.InternalMessageInfo

func (m *QueryAllTimedoutInvoiceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTimedoutInvoiceResponse struct {
	TimedoutInvoice []TimedoutInvoice   `protobuf:"bytes,1,rep,name=TimedoutInvoice,proto3" json:"TimedoutInvoice"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimedoutInvoiceResponse) Reset()         { *m = QueryAllTimedoutInvoiceResponse{} }
func (m *QueryAllTimedoutInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimedoutInvoiceResponse) ProtoMessage()    {}
func (*QueryAllTimedoutInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{11}
}
func (m *QueryAllTimedoutInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimedoutInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimedoutInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimedoutInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimedoutInvoiceResponse.Merge(m, src)
}
func (m *QueryAllTimedoutInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimedoutInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimedoutInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimedoutInvoiceResponse proto.InternalMessageInfo

func (m *QueryAllTimedoutInvoiceResponse) GetTimedoutInvoice() []TimedoutInvoice {
	if m != nil {
		return m.TimedoutInvoice
	}
	return nil
}

func (m *QueryAllTimedoutInvoiceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetInvoiceRequest)(nil), "stateset.core.invoice.QueryGetInvoiceRequest")
	proto.RegisterType((*QueryGetInvoiceResponse)(nil), "stateset.core.invoice.QueryGetInvoiceResponse")
	proto.RegisterType((*QueryAllInvoiceRequest)(nil), "stateset.core.invoice.QueryAllInvoiceRequest")
	proto.RegisterType((*QueryAllInvoiceResponse)(nil), "stateset.core.invoice.QueryAllInvoiceResponse")
	proto.RegisterType((*QueryGetSentInvoiceRequest)(nil), "stateset.core.invoice.QueryGetSentInvoiceRequest")
	proto.RegisterType((*QueryGetSentInvoiceResponse)(nil), "stateset.core.invoice.QueryGetSentInvoiceResponse")
	proto.RegisterType((*QueryAllSentInvoiceRequest)(nil), "stateset.core.invoice.QueryAllSentInvoiceRequest")
	proto.RegisterType((*QueryAllSentInvoiceResponse)(nil), "stateset.core.invoice.QueryAllSentInvoiceResponse")
	proto.RegisterType((*QueryGetTimedoutInvoiceRequest)(nil), "stateset.core.invoice.QueryGetTimedoutInvoiceRequest")
	proto.RegisterType((*QueryGetTimedoutInvoiceResponse)(nil), "stateset.core.invoice.QueryGetTimedoutInvoiceResponse")
	proto.RegisterType((*QueryAllTimedoutInvoiceRequest)(nil), "stateset.core.invoice.QueryAllTimedoutInvoiceRequest")
	proto.RegisterType((*QueryAllTimedoutInvoiceResponse)(nil), "stateset.core.invoice.QueryAllTimedoutInvoiceResponse")
}

func init() { proto.RegisterFile("invoice/query.proto", fileDescriptor_42451b139c18b2f9) }

var fileDescriptor_42451b139c18b2f9 = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x41, 0x6b, 0x13, 0x4f,
	0x18, 0xc6, 0x33, 0x69, 0xff, 0xff, 0xc2, 0x14, 0x2a, 0x8c, 0x56, 0x65, 0x95, 0x6d, 0x19, 0xb5,
	0x8d, 0xad, 0x9d, 0x31, 0x2d, 0xf5, 0x28, 0xa4, 0x07, 0x8b, 0x9e, 0x34, 0x8a, 0xa0, 0x17, 0xdd,
	0x24, 0xc3, 0x76, 0x61, 0xb3, 0x93, 0x66, 0x26, 0xc5, 0x20, 0x5e, 0xfc, 0x04, 0x42, 0xf1, 0x0b,
	0x28, 0x7e, 0x01, 0xc5, 0x2f, 0xe0, 0xa9, 0xc7, 0x82, 0x17, 0x4f, 0x22, 0x89, 0x5f, 0xc0, 0x6f,
	0x20, 0xbb, 0xfb, 0x6e, 0xb3, 0xd9, 0xec, 0x66, 0x9b, 0x9a, 0x53, 0x97, 0x99, 0xf7, 0x79, 0xe7,
	0xf7, 0x3c, 0x2f, 0x33, 0x0d, 0x3e, 0xef, 0x78, 0x07, 0xd2, 0xa9, 0x0b, 0xbe, 0xdf, 0x11, 0xed,
	0x2e, 0x6b, 0xb5, 0xa5, 0x96, 0x64, 0x51, 0x69, 0x4b, 0x0b, 0x25, 0x34, 0xab, 0xcb, 0xb6, 0x60,
	0x50, 0x62, 0x5c, 0xb5, 0xa5, 0xb4, 0x5d, 0xc1, 0xad, 0x96, 0xc3, 0x2d, 0xcf, 0x93, 0xda, 0xd2,
	0x8e, 0xf4, 0x54, 0x28, 0x32, 0xd6, 0xea, 0x52, 0x35, 0xa5, 0xe2, 0x35, 0x4b, 0x41, 0x37, 0x7e,
	0x50, 0xae, 0x09, 0x6d, 0x95, 0x79, 0xcb, 0xb2, 0x1d, 0x2f, 0x28, 0x86, 0xda, 0xc5, 0xe8, 0x54,
	0xf8, 0x0b, 0xcb, 0x46, 0xb4, 0xac, 0x84, 0xa7, 0x5f, 0x0c, 0xef, 0x99, 0xd1, 0x9e, 0x76, 0x9a,
	0xa2, 0x21, 0x3b, 0xc9, 0xfd, 0x0b, 0xb6, 0xb4, 0x65, 0xf0, 0xc9, 0xfd, 0xaf, 0x70, 0x95, 0x96,
	0xf0, 0xc5, 0x47, 0x3e, 0xca, 0xae, 0xd0, 0xf7, 0xc3, 0xf2, 0xaa, 0xd8, 0xef, 0x08, 0xa5, 0xc9,
	0x02, 0x2e, 0x3a, 0x8d, 0xcb, 0x68, 0x19, 0x95, 0x66, 0xab, 0x45, 0xa7, 0x41, 0x9f, 0xe1, 0x4b,
	0x23, 0x95, 0xaa, 0x25, 0x3d, 0x25, 0xc8, 0x5d, 0x3c, 0x07, 0x4b, 0x41, 0xfd, 0xfc, 0xa6, 0xc9,
	0x52, 0x03, 0x62, 0x50, 0xb5, 0x33, 0x7b, 0xf4, 0x73, 0xa9, 0x50, 0x8d, 0x44, 0xf4, 0x25, 0x40,
	0x54, 0x5c, 0x37, 0x01, 0x71, 0x0f, 0xe3, 0x41, 0x36, 0xd0, 0x7c, 0x85, 0x85, 0x41, 0x32, 0x3f,
	0x48, 0x16, 0x8e, 0x05, 0x82, 0x64, 0x0f, 0x2d, 0x3b, 0xd2, 0x56, 0x63, 0x4a, 0xfa, 0x01, 0x01,
	0x7d, 0xfc, 0x88, 0x34, 0xfa, 0x99, 0x89, 0xe9, 0xc9, 0xee, 0x10, 0x63, 0x31, 0x60, 0x5c, 0xcd,
	0x65, 0x0c, 0x0f, 0x1f, 0x82, 0xbc, 0x85, 0x8d, 0x28, 0xe1, 0xc7, 0xc2, 0xcb, 0x9b, 0x87, 0x83,
	0xaf, 0xa4, 0x56, 0x83, 0xab, 0x07, 0x78, 0x3e, 0xb6, 0x0c, 0xd1, 0xd1, 0x0c, 0x67, 0xb1, 0x4a,
	0x70, 0x17, 0x17, 0xd3, 0x06, 0x80, 0x55, 0x5c, 0x37, 0x05, 0x6c, 0x5a, 0x33, 0xfa, 0x8c, 0xc0,
	0x51, 0xf2, 0x98, 0x2c, 0x47, 0x33, 0x67, 0x76, 0x34, 0xbd, 0x99, 0xdd, 0xc6, 0x66, 0x34, 0x85,
	0x27, 0x70, 0xef, 0x72, 0xe6, 0xd6, 0xc5, 0x4b, 0x99, 0x0a, 0x70, 0xfa, 0x14, 0x9f, 0x4b, 0x6c,
	0x9d, 0xc4, 0x9a, 0xee, 0x36, 0x51, 0x0d, 0x8e, 0x93, 0x4d, 0xe8, 0x1e, 0xc0, 0x56, 0x5c, 0x37,
	0x03, 0x76, 0x5a, 0xb3, 0xfc, 0x86, 0xc0, 0x65, 0xda, 0x51, 0xe3, 0x5c, 0xce, 0xfc, 0xb3, 0xcb,
	0xa9, 0xcd, 0x76, 0xf3, 0xcf, 0x1c, 0xfe, 0x2f, 0x30, 0x41, 0xde, 0xa3, 0x93, 0x37, 0x82, 0x6c,
	0x64, 0xd0, 0xa5, 0x3f, 0xa3, 0x06, 0x3b, 0x6d, 0x79, 0x08, 0x40, 0xd7, 0xdf, 0x7e, 0xff, 0x7d,
	0x58, 0xbc, 0x41, 0xae, 0xf1, 0x48, 0xc7, 0x7d, 0x1d, 0x4f, 0xfc, 0x43, 0xe0, 0xaf, 0x9d, 0xc6,
	0x1b, 0x72, 0x88, 0x30, 0x86, 0x06, 0x15, 0xd7, 0x1d, 0x8f, 0x36, 0xf2, 0xb8, 0x8e, 0x47, 0x1b,
	0x7d, 0x28, 0xe9, 0x4a, 0x80, 0xb6, 0x4c, 0xcc, 0xf1, 0x68, 0xe4, 0x13, 0x1a, 0xba, 0xa9, 0xa4,
	0x9c, 0x13, 0xc1, 0xe8, 0x9b, 0x62, 0x6c, 0x4e, 0x22, 0x01, 0x3c, 0x1e, 0xe0, 0xdd, 0x24, 0xab,
	0x19, 0x78, 0x6a, 0xa0, 0x09, 0xd3, 0xfb, 0x88, 0xf0, 0x42, 0xac, 0x91, 0x9f, 0x60, 0x39, 0x27,
	0x92, 0x49, 0x51, 0xd3, 0x9f, 0x32, 0xba, 0x16, 0xa0, 0x5e, 0x27, 0x34, 0x1f, 0x95, 0x7c, 0x45,
	0x23, 0xf7, 0x84, 0x6c, 0xe7, 0xc4, 0x93, 0x7e, 0xbb, 0x8d, 0x3b, 0x93, 0xca, 0x00, 0x77, 0x2b,
	0xc0, 0xdd, 0x20, 0xeb, 0x19, 0xb8, 0x7a, 0x58, 0x17, 0xa6, 0xfb, 0x05, 0x61, 0x92, 0x68, 0xe8,
	0x27, 0xbc, 0x9d, 0x13, 0xd7, 0x59, 0xd0, 0xb3, 0x1f, 0x19, 0xca, 0x02, 0xf4, 0x12, 0x59, 0x39,
	0x1d, 0xfa, 0xce, 0xce, 0x51, 0xcf, 0x44, 0xc7, 0x3d, 0x13, 0xfd, 0xea, 0x99, 0xe8, 0x5d, 0xdf,
	0x2c, 0x1c, 0xf7, 0xcd, 0xc2, 0x8f, 0xbe, 0x59, 0x78, 0x5e, 0xb2, 0x1d, 0xbd, 0xd7, 0xa9, 0xb1,
	0xba, 0x6c, 0x26, 0x7a, 0xbd, 0x1a, 0x74, 0xeb, 0xb6, 0x84, 0xaa, 0xfd, 0x1f, 0xfc, 0xb4, 0xda,
	0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x88, 0xe2, 0xac, 0xaf, 0x3b, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a invoice by id.
	Invoice(ctx context.Context, in *QueryGetInvoiceRequest, opts ...grpc.CallOption) (*QueryGetInvoiceResponse, error)
	// Queries a list of invoice items.
	InvoiceAll(ctx context.Context, in *QueryAllInvoiceRequest, opts ...grpc.CallOption) (*QueryAllInvoiceResponse, error)
	// Queries a sentInvoice by id.
	SentInvoice(ctx context.Context, in *QueryGetSentInvoiceRequest, opts ...grpc.CallOption) (*QueryGetSentInvoiceResponse, error)
	// Queries a list of sentInvoice items.
	SentInvoiceAll(ctx context.Context, in *QueryAllSentInvoiceRequest, opts ...grpc.CallOption) (*QueryAllSentInvoiceResponse, error)
	// Queries a timedoutInvoice by id.
	TimedoutInvoice(ctx context.Context, in *QueryGetTimedoutInvoiceRequest, opts ...grpc.CallOption) (*QueryGetTimedoutInvoiceResponse, error)
	// Queries a list of timedoutInvoice items.
	TimedoutInvoiceAll(ctx context.Context, in *QueryAllTimedoutInvoiceRequest, opts ...grpc.CallOption) (*QueryAllTimedoutInvoiceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Invoice(ctx context.Context, in *QueryGetInvoiceRequest, opts ...grpc.CallOption) (*QueryGetInvoiceResponse, error) {
	out := new(QueryGetInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.invoice.Query/Invoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InvoiceAll(ctx context.Context, in *QueryAllInvoiceRequest, opts ...grpc.CallOption) (*QueryAllInvoiceResponse, error) {
	out := new(QueryAllInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.invoice.Query/InvoiceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SentInvoice(ctx context.Context, in *QueryGetSentInvoiceRequest, opts ...grpc.CallOption) (*QueryGetSentInvoiceResponse, error) {
	out := new(QueryGetSentInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.invoice.Query/SentInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SentInvoiceAll(ctx context.Context, in *QueryAllSentInvoiceRequest, opts ...grpc.CallOption) (*QueryAllSentInvoiceResponse, error) {
	out := new(QueryAllSentInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.invoice.Query/SentInvoiceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimedoutInvoice(ctx context.Context, in *QueryGetTimedoutInvoiceRequest, opts ...grpc.CallOption) (*QueryGetTimedoutInvoiceResponse, error) {
	out := new(QueryGetTimedoutInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.invoice.Query/TimedoutInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimedoutInvoiceAll(ctx context.Context, in *QueryAllTimedoutInvoiceRequest, opts ...grpc.CallOption) (*QueryAllTimedoutInvoiceResponse, error) {
	out := new(QueryAllTimedoutInvoiceResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.invoice.Query/TimedoutInvoiceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a invoice by id.
	Invoice(context.Context, *QueryGetInvoiceRequest) (*QueryGetInvoiceResponse, error)
	// Queries a list of invoice items.
	InvoiceAll(context.Context, *QueryAllInvoiceRequest) (*QueryAllInvoiceResponse, error)
	// Queries a sentInvoice by id.
	SentInvoice(context.Context, *QueryGetSentInvoiceRequest) (*QueryGetSentInvoiceResponse, error)
	// Queries a list of sentInvoice items.
	SentInvoiceAll(context.Context, *QueryAllSentInvoiceRequest) (*QueryAllSentInvoiceResponse, error)
	// Queries a timedoutInvoice by id.
	TimedoutInvoice(context.Context, *QueryGetTimedoutInvoiceRequest) (*QueryGetTimedoutInvoiceResponse, error)
	// Queries a list of timedoutInvoice items.
	TimedoutInvoiceAll(context.Context, *QueryAllTimedoutInvoiceRequest) (*QueryAllTimedoutInvoiceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Invoice(ctx context.Context, req *QueryGetInvoiceRequest) (*QueryGetInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoice not implemented")
}
func (*UnimplementedQueryServer) InvoiceAll(ctx context.Context, req *QueryAllInvoiceRequest) (*QueryAllInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvoiceAll not implemented")
}
func (*UnimplementedQueryServer) SentInvoice(ctx context.Context, req *QueryGetSentInvoiceRequest) (*QueryGetSentInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentInvoice not implemented")
}
func (*UnimplementedQueryServer) SentInvoiceAll(ctx context.Context, req *QueryAllSentInvoiceRequest) (*QueryAllSentInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentInvoiceAll not implemented")
}
func (*UnimplementedQueryServer) TimedoutInvoice(ctx context.Context, req *QueryGetTimedoutInvoiceRequest) (*QueryGetTimedoutInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimedoutInvoice not implemented")
}
func (*UnimplementedQueryServer) TimedoutInvoiceAll(ctx context.Context, req *QueryAllTimedoutInvoiceRequest) (*QueryAllTimedoutInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimedoutInvoiceAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Invoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Invoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.invoice.Query/Invoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Invoice(ctx, req.(*QueryGetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InvoiceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InvoiceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.invoice.Query/InvoiceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InvoiceAll(ctx, req.(*QueryAllInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SentInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSentInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.invoice.Query/SentInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentInvoice(ctx, req.(*QueryGetSentInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SentInvoiceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSentInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentInvoiceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.invoice.Query/SentInvoiceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentInvoiceAll(ctx, req.(*QueryAllSentInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimedoutInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimedoutInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimedoutInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.invoice.Query/TimedoutInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimedoutInvoice(ctx, req.(*QueryGetTimedoutInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimedoutInvoiceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTimedoutInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimedoutInvoiceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.invoice.Query/TimedoutInvoiceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimedoutInvoiceAll(ctx, req.(*QueryAllTimedoutInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stateset.core.invoice.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoice",
			Handler:    _Query_Invoice_Handler,
		},
		{
			MethodName: "InvoiceAll",
			Handler:    _Query_InvoiceAll_Handler,
		},
		{
			MethodName: "SentInvoice",
			Handler:    _Query_SentInvoice_Handler,
		},
		{
			MethodName: "SentInvoiceAll",
			Handler:    _Query_SentInvoiceAll_Handler,
		},
		{
			MethodName: "TimedoutInvoice",
			Handler:    _Query_TimedoutInvoice_Handler,
		},
		{
			MethodName: "TimedoutInvoiceAll",
			Handler:    _Query_TimedoutInvoiceAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoice/query.proto",
}

func (m *QueryGetInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Invoice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Invoice) > 0 {
		for iNdEx := len(m.Invoice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Invoice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SentInvoice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSentInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSentInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSentInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSentInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSentInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSentInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SentInvoice) > 0 {
		for iNdEx := len(m.SentInvoice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SentInvoice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimedoutInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimedoutInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimedoutInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimedoutInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimedoutInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimedoutInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TimedoutInvoice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTimedoutInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimedoutInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimedoutInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTimedoutInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimedoutInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimedoutInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TimedoutInvoice) > 0 {
		for iNdEx := len(m.TimedoutInvoice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimedoutInvoice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Invoice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Invoice) > 0 {
		for _, e := range m.Invoice {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSentInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSentInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SentInvoice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSentInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSentInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SentInvoice) > 0 {
		for _, e := range m.SentInvoice {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTimedoutInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTimedoutInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TimedoutInvoice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTimedoutInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTimedoutInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TimedoutInvoice) > 0 {
		for _, e := range m.TimedoutInvoice {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Invoice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invoice = append(m.Invoice, Invoice{})
			if err := m.Invoice[len(m.Invoice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentInvoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SentInvoice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSentInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSentInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSentInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSentInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSentInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSentInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentInvoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentInvoice = append(m.SentInvoice, SentInvoice{})
			if err := m.SentInvoice[len(m.SentInvoice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimedoutInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimedoutInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimedoutInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimedoutInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimedoutInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimedoutInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedoutInvoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimedoutInvoice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimedoutInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimedoutInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimedoutInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimedoutInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimedoutInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimedoutInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedoutInvoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimedoutInvoice = append(m.TimedoutInvoice, TimedoutInvoice{})
			if err := m.TimedoutInvoice[len(m.TimedoutInvoice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
