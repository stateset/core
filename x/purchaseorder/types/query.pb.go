// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: purchaseorder/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetPurchaseorderRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPurchaseorderRequest) Reset()         { *m = QueryGetPurchaseorderRequest{} }
func (m *QueryGetPurchaseorderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPurchaseorderRequest) ProtoMessage()    {}
func (*QueryGetPurchaseorderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{0}
}
func (m *QueryGetPurchaseorderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPurchaseorderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPurchaseorderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPurchaseorderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPurchaseorderRequest.Merge(m, src)
}
func (m *QueryGetPurchaseorderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPurchaseorderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPurchaseorderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPurchaseorderRequest proto.InternalMessageInfo

func (m *QueryGetPurchaseorderRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPurchaseorderResponse struct {
	Purchaseorder Purchaseorder `protobuf:"bytes,1,opt,name=Purchaseorder,proto3" json:"Purchaseorder"`
}

func (m *QueryGetPurchaseorderResponse) Reset()         { *m = QueryGetPurchaseorderResponse{} }
func (m *QueryGetPurchaseorderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPurchaseorderResponse) ProtoMessage()    {}
func (*QueryGetPurchaseorderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{1}
}
func (m *QueryGetPurchaseorderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPurchaseorderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPurchaseorderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPurchaseorderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPurchaseorderResponse.Merge(m, src)
}
func (m *QueryGetPurchaseorderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPurchaseorderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPurchaseorderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPurchaseorderResponse proto.InternalMessageInfo

func (m *QueryGetPurchaseorderResponse) GetPurchaseorder() Purchaseorder {
	if m != nil {
		return m.Purchaseorder
	}
	return Purchaseorder{}
}

type QueryAllPurchaseorderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPurchaseorderRequest) Reset()         { *m = QueryAllPurchaseorderRequest{} }
func (m *QueryAllPurchaseorderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPurchaseorderRequest) ProtoMessage()    {}
func (*QueryAllPurchaseorderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{2}
}
func (m *QueryAllPurchaseorderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPurchaseorderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPurchaseorderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPurchaseorderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPurchaseorderRequest.Merge(m, src)
}
func (m *QueryAllPurchaseorderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPurchaseorderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPurchaseorderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPurchaseorderRequest proto.InternalMessageInfo

func (m *QueryAllPurchaseorderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPurchaseorderResponse struct {
	Purchaseorder []Purchaseorder     `protobuf:"bytes,1,rep,name=Purchaseorder,proto3" json:"Purchaseorder"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPurchaseorderResponse) Reset()         { *m = QueryAllPurchaseorderResponse{} }
func (m *QueryAllPurchaseorderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPurchaseorderResponse) ProtoMessage()    {}
func (*QueryAllPurchaseorderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{3}
}
func (m *QueryAllPurchaseorderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPurchaseorderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPurchaseorderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPurchaseorderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPurchaseorderResponse.Merge(m, src)
}
func (m *QueryAllPurchaseorderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPurchaseorderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPurchaseorderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPurchaseorderResponse proto.InternalMessageInfo

func (m *QueryAllPurchaseorderResponse) GetPurchaseorder() []Purchaseorder {
	if m != nil {
		return m.Purchaseorder
	}
	return nil
}

func (m *QueryAllPurchaseorderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSentPurchaseorderRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSentPurchaseorderRequest) Reset()         { *m = QueryGetSentPurchaseorderRequest{} }
func (m *QueryGetSentPurchaseorderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentPurchaseorderRequest) ProtoMessage()    {}
func (*QueryGetSentPurchaseorderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{4}
}
func (m *QueryGetSentPurchaseorderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentPurchaseorderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentPurchaseorderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentPurchaseorderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentPurchaseorderRequest.Merge(m, src)
}
func (m *QueryGetSentPurchaseorderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentPurchaseorderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentPurchaseorderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentPurchaseorderRequest proto.InternalMessageInfo

func (m *QueryGetSentPurchaseorderRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSentPurchaseorderResponse struct {
	SentPurchaseorder SentPurchaseorder `protobuf:"bytes,1,opt,name=SentPurchaseorder,proto3" json:"SentPurchaseorder"`
}

func (m *QueryGetSentPurchaseorderResponse) Reset()         { *m = QueryGetSentPurchaseorderResponse{} }
func (m *QueryGetSentPurchaseorderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentPurchaseorderResponse) ProtoMessage()    {}
func (*QueryGetSentPurchaseorderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{5}
}
func (m *QueryGetSentPurchaseorderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentPurchaseorderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentPurchaseorderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentPurchaseorderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentPurchaseorderResponse.Merge(m, src)
}
func (m *QueryGetSentPurchaseorderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentPurchaseorderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentPurchaseorderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentPurchaseorderResponse proto.InternalMessageInfo

func (m *QueryGetSentPurchaseorderResponse) GetSentPurchaseorder() SentPurchaseorder {
	if m != nil {
		return m.SentPurchaseorder
	}
	return SentPurchaseorder{}
}

type QueryAllSentPurchaseorderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSentPurchaseorderRequest) Reset()         { *m = QueryAllSentPurchaseorderRequest{} }
func (m *QueryAllSentPurchaseorderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSentPurchaseorderRequest) ProtoMessage()    {}
func (*QueryAllSentPurchaseorderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{6}
}
func (m *QueryAllSentPurchaseorderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSentPurchaseorderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSentPurchaseorderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSentPurchaseorderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSentPurchaseorderRequest.Merge(m, src)
}
func (m *QueryAllSentPurchaseorderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSentPurchaseorderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSentPurchaseorderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSentPurchaseorderRequest proto.InternalMessageInfo

func (m *QueryAllSentPurchaseorderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSentPurchaseorderResponse struct {
	SentPurchaseorder []SentPurchaseorder `protobuf:"bytes,1,rep,name=SentPurchaseorder,proto3" json:"SentPurchaseorder"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSentPurchaseorderResponse) Reset()         { *m = QueryAllSentPurchaseorderResponse{} }
func (m *QueryAllSentPurchaseorderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSentPurchaseorderResponse) ProtoMessage()    {}
func (*QueryAllSentPurchaseorderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{7}
}
func (m *QueryAllSentPurchaseorderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSentPurchaseorderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSentPurchaseorderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSentPurchaseorderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSentPurchaseorderResponse.Merge(m, src)
}
func (m *QueryAllSentPurchaseorderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSentPurchaseorderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSentPurchaseorderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSentPurchaseorderResponse proto.InternalMessageInfo

func (m *QueryAllSentPurchaseorderResponse) GetSentPurchaseorder() []SentPurchaseorder {
	if m != nil {
		return m.SentPurchaseorder
	}
	return nil
}

func (m *QueryAllSentPurchaseorderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTimedoutPurchaseorderRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTimedoutPurchaseorderRequest) Reset()         { *m = QueryGetTimedoutPurchaseorderRequest{} }
func (m *QueryGetTimedoutPurchaseorderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimedoutPurchaseorderRequest) ProtoMessage()    {}
func (*QueryGetTimedoutPurchaseorderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{8}
}
func (m *QueryGetTimedoutPurchaseorderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimedoutPurchaseorderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimedoutPurchaseorderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimedoutPurchaseorderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimedoutPurchaseorderRequest.Merge(m, src)
}
func (m *QueryGetTimedoutPurchaseorderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimedoutPurchaseorderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimedoutPurchaseorderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimedoutPurchaseorderRequest proto.InternalMessageInfo

func (m *QueryGetTimedoutPurchaseorderRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTimedoutPurchaseorderResponse struct {
	TimedoutPurchaseorder TimedoutPurchaseorder `protobuf:"bytes,1,opt,name=TimedoutPurchaseorder,proto3" json:"TimedoutPurchaseorder"`
}

func (m *QueryGetTimedoutPurchaseorderResponse) Reset()         { *m = QueryGetTimedoutPurchaseorderResponse{} }
func (m *QueryGetTimedoutPurchaseorderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimedoutPurchaseorderResponse) ProtoMessage()    {}
func (*QueryGetTimedoutPurchaseorderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{9}
}
func (m *QueryGetTimedoutPurchaseorderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimedoutPurchaseorderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimedoutPurchaseorderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimedoutPurchaseorderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimedoutPurchaseorderResponse.Merge(m, src)
}
func (m *QueryGetTimedoutPurchaseorderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimedoutPurchaseorderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimedoutPurchaseorderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimedoutPurchaseorderResponse proto.InternalMessageInfo

func (m *QueryGetTimedoutPurchaseorderResponse) GetTimedoutPurchaseorder() TimedoutPurchaseorder {
	if m != nil {
		return m.TimedoutPurchaseorder
	}
	return TimedoutPurchaseorder{}
}

type QueryAllTimedoutPurchaseorderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimedoutPurchaseorderRequest) Reset()         { *m = QueryAllTimedoutPurchaseorderRequest{} }
func (m *QueryAllTimedoutPurchaseorderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimedoutPurchaseorderRequest) ProtoMessage()    {}
func (*QueryAllTimedoutPurchaseorderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{10}
}
func (m *QueryAllTimedoutPurchaseorderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimedoutPurchaseorderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimedoutPurchaseorderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimedoutPurchaseorderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimedoutPurchaseorderRequest.Merge(m, src)
}
func (m *QueryAllTimedoutPurchaseorderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimedoutPurchaseorderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimedoutPurchaseorderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimedoutPurchaseorderRequest proto.InternalMessageInfo

func (m *QueryAllTimedoutPurchaseorderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTimedoutPurchaseorderResponse struct {
	TimedoutPurchaseorder []TimedoutPurchaseorder `protobuf:"bytes,1,rep,name=TimedoutPurchaseorder,proto3" json:"TimedoutPurchaseorder"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimedoutPurchaseorderResponse) Reset()         { *m = QueryAllTimedoutPurchaseorderResponse{} }
func (m *QueryAllTimedoutPurchaseorderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimedoutPurchaseorderResponse) ProtoMessage()    {}
func (*QueryAllTimedoutPurchaseorderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e155db192b5ef7f, []int{11}
}
func (m *QueryAllTimedoutPurchaseorderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimedoutPurchaseorderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimedoutPurchaseorderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimedoutPurchaseorderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimedoutPurchaseorderResponse.Merge(m, src)
}
func (m *QueryAllTimedoutPurchaseorderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimedoutPurchaseorderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimedoutPurchaseorderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimedoutPurchaseorderResponse proto.InternalMessageInfo

func (m *QueryAllTimedoutPurchaseorderResponse) GetTimedoutPurchaseorder() []TimedoutPurchaseorder {
	if m != nil {
		return m.TimedoutPurchaseorder
	}
	return nil
}

func (m *QueryAllTimedoutPurchaseorderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetPurchaseorderRequest)(nil), "stateset.core.purchaseorder.QueryGetPurchaseorderRequest")
	proto.RegisterType((*QueryGetPurchaseorderResponse)(nil), "stateset.core.purchaseorder.QueryGetPurchaseorderResponse")
	proto.RegisterType((*QueryAllPurchaseorderRequest)(nil), "stateset.core.purchaseorder.QueryAllPurchaseorderRequest")
	proto.RegisterType((*QueryAllPurchaseorderResponse)(nil), "stateset.core.purchaseorder.QueryAllPurchaseorderResponse")
	proto.RegisterType((*QueryGetSentPurchaseorderRequest)(nil), "stateset.core.purchaseorder.QueryGetSentPurchaseorderRequest")
	proto.RegisterType((*QueryGetSentPurchaseorderResponse)(nil), "stateset.core.purchaseorder.QueryGetSentPurchaseorderResponse")
	proto.RegisterType((*QueryAllSentPurchaseorderRequest)(nil), "stateset.core.purchaseorder.QueryAllSentPurchaseorderRequest")
	proto.RegisterType((*QueryAllSentPurchaseorderResponse)(nil), "stateset.core.purchaseorder.QueryAllSentPurchaseorderResponse")
	proto.RegisterType((*QueryGetTimedoutPurchaseorderRequest)(nil), "stateset.core.purchaseorder.QueryGetTimedoutPurchaseorderRequest")
	proto.RegisterType((*QueryGetTimedoutPurchaseorderResponse)(nil), "stateset.core.purchaseorder.QueryGetTimedoutPurchaseorderResponse")
	proto.RegisterType((*QueryAllTimedoutPurchaseorderRequest)(nil), "stateset.core.purchaseorder.QueryAllTimedoutPurchaseorderRequest")
	proto.RegisterType((*QueryAllTimedoutPurchaseorderResponse)(nil), "stateset.core.purchaseorder.QueryAllTimedoutPurchaseorderResponse")
}

func init() { proto.RegisterFile("purchaseorder/query.proto", fileDescriptor_3e155db192b5ef7f) }

var fileDescriptor_3e155db192b5ef7f = []byte{
	// 686 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x31, 0x6f, 0xd3, 0x4e,
	0x18, 0xc6, 0x73, 0x69, 0xff, 0x7f, 0x89, 0x43, 0x20, 0x38, 0x15, 0xa9, 0x84, 0x62, 0x5a, 0x0b,
	0x0a, 0x8a, 0xd0, 0x1d, 0x75, 0xa1, 0x55, 0x8b, 0x0a, 0x72, 0x06, 0xca, 0x58, 0x02, 0x62, 0x60,
	0x41, 0x4e, 0x72, 0xb8, 0x46, 0x8e, 0xcf, 0xf5, 0x5d, 0x80, 0x0a, 0xb1, 0xb0, 0xb0, 0x22, 0x31,
	0xf0, 0x69, 0x10, 0x8c, 0x5d, 0x10, 0x91, 0x58, 0x58, 0x80, 0x2a, 0x61, 0xe5, 0x3b, 0x20, 0xdb,
	0x17, 0x51, 0x27, 0xf6, 0xc5, 0x6d, 0xcc, 0xe6, 0xd6, 0xef, 0xf3, 0xde, 0xfb, 0x7b, 0x1e, 0xf7,
	0xbd, 0xc2, 0xb3, 0x7e, 0x27, 0x68, 0x6e, 0x5b, 0x9c, 0xb2, 0xa0, 0x45, 0x03, 0xb2, 0xd3, 0xa1,
	0xc1, 0x2e, 0xf6, 0x03, 0x26, 0x18, 0x3a, 0xc7, 0x85, 0x25, 0x28, 0xa7, 0x02, 0x37, 0x59, 0x40,
	0x71, 0xa2, 0xb0, 0x32, 0x67, 0x33, 0x66, 0xbb, 0x94, 0x58, 0xbe, 0x43, 0x2c, 0xcf, 0x63, 0xc2,
	0x12, 0x0e, 0xf3, 0x78, 0x2c, 0xad, 0x54, 0x9b, 0x8c, 0xb7, 0x19, 0x27, 0x0d, 0x8b, 0xd3, 0xb8,
	0x27, 0x79, 0xb6, 0xd4, 0xa0, 0xc2, 0x5a, 0x22, 0xbe, 0x65, 0x3b, 0x5e, 0x54, 0x2c, 0x6b, 0x17,
	0x92, 0x13, 0x24, 0x7e, 0x92, 0x25, 0x8b, 0xc9, 0x12, 0x4e, 0x3d, 0xf1, 0x38, 0xad, 0xae, 0x9a,
	0xac, 0x13, 0x4e, 0x9b, 0xb6, 0x58, 0x27, 0xbd, 0x76, 0xc6, 0x66, 0x36, 0x8b, 0x1e, 0x49, 0xf8,
	0x14, 0xff, 0x56, 0xc7, 0x70, 0xee, 0x5e, 0x38, 0xee, 0x26, 0x15, 0x5b, 0x07, 0x45, 0x75, 0xba,
	0xd3, 0xa1, 0x5c, 0xa0, 0x93, 0xb0, 0xec, 0xb4, 0x66, 0xc1, 0x3c, 0xb8, 0x32, 0x5d, 0x2f, 0x3b,
	0x2d, 0xfd, 0x39, 0x3c, 0x9f, 0x51, 0xcf, 0x7d, 0xe6, 0x71, 0x8a, 0x1e, 0xc2, 0x13, 0x89, 0x17,
	0x91, 0xf6, 0xb8, 0x51, 0xc5, 0x0a, 0x73, 0x71, 0x42, 0x51, 0x9b, 0xde, 0xfb, 0x71, 0xa1, 0x54,
	0x4f, 0xb6, 0xd1, 0x9f, 0xc8, 0x41, 0x4d, 0xd7, 0x4d, 0x1d, 0xf4, 0x0e, 0x84, 0x7f, 0x9d, 0x96,
	0x87, 0x2e, 0xe2, 0x38, 0x16, 0x1c, 0xc6, 0x82, 0xe3, 0xa8, 0x65, 0x2c, 0x78, 0xcb, 0xb2, 0xa9,
	0xd4, 0xd6, 0x0f, 0x28, 0xf5, 0x4f, 0x40, 0x12, 0x8e, 0x1e, 0x94, 0x4d, 0x38, 0x55, 0x00, 0x21,
	0xda, 0x4c, 0x10, 0x94, 0x23, 0x82, 0xcb, 0x63, 0x09, 0xe2, 0xa1, 0x12, 0x08, 0x06, 0x9c, 0x1f,
	0x64, 0x74, 0x9f, 0x7a, 0xf9, 0x72, 0x7d, 0x03, 0xe0, 0x82, 0x42, 0x24, 0xd1, 0x1b, 0xf0, 0xf4,
	0xc8, 0x4b, 0xe9, 0x35, 0x56, 0xe2, 0x8f, 0xa8, 0xa4, 0x05, 0xa3, 0xed, 0xf4, 0xa7, 0x72, 0x7a,
	0xd3, 0x75, 0x33, 0xa7, 0x2f, 0x2a, 0xec, 0xee, 0x80, 0x3a, 0xfd, 0x30, 0x35, 0xf5, 0x54, 0x81,
	0xd4, 0xc5, 0x85, 0xbf, 0x02, 0x2f, 0x0e, 0x72, 0x7c, 0x20, 0xd7, 0x41, 0xae, 0x0f, 0xe0, 0x3d,
	0x80, 0x97, 0xc6, 0x08, 0xa5, 0x1d, 0x1e, 0x3c, 0x93, 0x5a, 0x20, 0x73, 0x30, 0x94, 0x96, 0xa4,
	0x2a, 0xa5, 0x2d, 0xe9, 0x6d, 0x75, 0x4f, 0x12, 0x99, 0xae, 0xab, 0x24, 0x2a, 0xea, 0xa3, 0xd8,
	0x1f, 0x38, 0x91, 0x7d, 0xe0, 0x78, 0x27, 0xa6, 0xfe, 0x81, 0x13, 0x85, 0x7d, 0x24, 0xc6, 0xef,
	0x63, 0xf0, 0xbf, 0x08, 0x11, 0x7d, 0x04, 0x43, 0xdb, 0x0c, 0xad, 0x29, 0xa7, 0x56, 0x5d, 0x16,
	0x95, 0xf5, 0xa3, 0x48, 0xe3, 0xf1, 0xf4, 0xd5, 0xd7, 0x5f, 0x7f, 0xbd, 0x2b, 0x2f, 0x21, 0x42,
	0x06, 0x3d, 0x48, 0xd8, 0x83, 0x28, 0x2e, 0x4b, 0xf2, 0xd2, 0x69, 0xbd, 0x42, 0x1f, 0x00, 0x3c,
	0x95, 0x68, 0x69, 0xba, 0x6e, 0x1e, 0x88, 0x8c, 0x8b, 0x24, 0x0f, 0x44, 0xd6, 0xd5, 0xa0, 0x1b,
	0x11, 0xc4, 0x55, 0x54, 0xcd, 0x0f, 0x81, 0xbe, 0x80, 0x94, 0xf5, 0x82, 0x36, 0x72, 0x59, 0x99,
	0xb5, 0x20, 0x2b, 0xb7, 0x8e, 0x2a, 0x97, 0x20, 0x37, 0x23, 0x90, 0x1b, 0x68, 0x59, 0x09, 0xc2,
	0x87, 0xf5, 0x71, 0x22, 0x9f, 0x01, 0x9c, 0x19, 0x69, 0x1d, 0xa6, 0xb2, 0x91, 0xcb, 0xda, 0x49,
	0xa0, 0x54, 0x7b, 0x5c, 0x5f, 0x89, 0xa0, 0xae, 0x21, 0x7c, 0x38, 0x28, 0xf4, 0x13, 0x64, 0xfc,
	0x9d, 0x23, 0x33, 0x97, 0xcd, 0xaa, 0xad, 0x55, 0xa9, 0x4d, 0xd2, 0x42, 0x82, 0xdd, 0x8e, 0xc0,
	0xd6, 0xd0, 0xaa, 0x12, 0x4c, 0xa4, 0xf5, 0x88, 0x13, 0xfb, 0x0e, 0xe0, 0x6c, 0xea, 0x11, 0x61,
	0x6a, 0x66, 0x2e, 0xdb, 0x27, 0x85, 0x1c, 0xb7, 0x6c, 0xf5, 0xf5, 0x08, 0xf2, 0x3a, 0x32, 0x0e,
	0x0f, 0x59, 0xbb, 0xbb, 0xd7, 0xd3, 0x40, 0xb7, 0xa7, 0x81, 0xfd, 0x9e, 0x06, 0xde, 0xf6, 0xb5,
	0x52, 0xb7, 0xaf, 0x95, 0xbe, 0xf5, 0xb5, 0xd2, 0x23, 0x6c, 0x3b, 0x62, 0xbb, 0xd3, 0xc0, 0x4d,
	0xd6, 0x1e, 0xea, 0xfb, 0x62, 0xb8, 0xf3, 0xae, 0x4f, 0x79, 0xe3, 0xff, 0xe8, 0xdf, 0xe6, 0xe5,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x93, 0xe9, 0x04, 0x47, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a purchaseorder by id.
	Purchaseorder(ctx context.Context, in *QueryGetPurchaseorderRequest, opts ...grpc.CallOption) (*QueryGetPurchaseorderResponse, error)
	// Queries a list of purchaseorder items.
	PurchaseorderAll(ctx context.Context, in *QueryAllPurchaseorderRequest, opts ...grpc.CallOption) (*QueryAllPurchaseorderResponse, error)
	// Queries a sentPurchaseorder by id.
	SentPurchaseorder(ctx context.Context, in *QueryGetSentPurchaseorderRequest, opts ...grpc.CallOption) (*QueryGetSentPurchaseorderResponse, error)
	// Queries a list of sentPurchaseorder items.
	SentPurchaseorderAll(ctx context.Context, in *QueryAllSentPurchaseorderRequest, opts ...grpc.CallOption) (*QueryAllSentPurchaseorderResponse, error)
	// Queries a timedoutPurchaseorder by id.
	TimedoutPurchaseorder(ctx context.Context, in *QueryGetTimedoutPurchaseorderRequest, opts ...grpc.CallOption) (*QueryGetTimedoutPurchaseorderResponse, error)
	// Queries a list of timedoutPurchaseorder items.
	TimedoutPurchaseorderAll(ctx context.Context, in *QueryAllTimedoutPurchaseorderRequest, opts ...grpc.CallOption) (*QueryAllTimedoutPurchaseorderResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Purchaseorder(ctx context.Context, in *QueryGetPurchaseorderRequest, opts ...grpc.CallOption) (*QueryGetPurchaseorderResponse, error) {
	out := new(QueryGetPurchaseorderResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.purchaseorder.Query/Purchaseorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PurchaseorderAll(ctx context.Context, in *QueryAllPurchaseorderRequest, opts ...grpc.CallOption) (*QueryAllPurchaseorderResponse, error) {
	out := new(QueryAllPurchaseorderResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.purchaseorder.Query/PurchaseorderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SentPurchaseorder(ctx context.Context, in *QueryGetSentPurchaseorderRequest, opts ...grpc.CallOption) (*QueryGetSentPurchaseorderResponse, error) {
	out := new(QueryGetSentPurchaseorderResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.purchaseorder.Query/SentPurchaseorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SentPurchaseorderAll(ctx context.Context, in *QueryAllSentPurchaseorderRequest, opts ...grpc.CallOption) (*QueryAllSentPurchaseorderResponse, error) {
	out := new(QueryAllSentPurchaseorderResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.purchaseorder.Query/SentPurchaseorderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimedoutPurchaseorder(ctx context.Context, in *QueryGetTimedoutPurchaseorderRequest, opts ...grpc.CallOption) (*QueryGetTimedoutPurchaseorderResponse, error) {
	out := new(QueryGetTimedoutPurchaseorderResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.purchaseorder.Query/TimedoutPurchaseorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimedoutPurchaseorderAll(ctx context.Context, in *QueryAllTimedoutPurchaseorderRequest, opts ...grpc.CallOption) (*QueryAllTimedoutPurchaseorderResponse, error) {
	out := new(QueryAllTimedoutPurchaseorderResponse)
	err := c.cc.Invoke(ctx, "/stateset.core.purchaseorder.Query/TimedoutPurchaseorderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a purchaseorder by id.
	Purchaseorder(context.Context, *QueryGetPurchaseorderRequest) (*QueryGetPurchaseorderResponse, error)
	// Queries a list of purchaseorder items.
	PurchaseorderAll(context.Context, *QueryAllPurchaseorderRequest) (*QueryAllPurchaseorderResponse, error)
	// Queries a sentPurchaseorder by id.
	SentPurchaseorder(context.Context, *QueryGetSentPurchaseorderRequest) (*QueryGetSentPurchaseorderResponse, error)
	// Queries a list of sentPurchaseorder items.
	SentPurchaseorderAll(context.Context, *QueryAllSentPurchaseorderRequest) (*QueryAllSentPurchaseorderResponse, error)
	// Queries a timedoutPurchaseorder by id.
	TimedoutPurchaseorder(context.Context, *QueryGetTimedoutPurchaseorderRequest) (*QueryGetTimedoutPurchaseorderResponse, error)
	// Queries a list of timedoutPurchaseorder items.
	TimedoutPurchaseorderAll(context.Context, *QueryAllTimedoutPurchaseorderRequest) (*QueryAllTimedoutPurchaseorderResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Purchaseorder(ctx context.Context, req *QueryGetPurchaseorderRequest) (*QueryGetPurchaseorderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchaseorder not implemented")
}
func (*UnimplementedQueryServer) PurchaseorderAll(ctx context.Context, req *QueryAllPurchaseorderRequest) (*QueryAllPurchaseorderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseorderAll not implemented")
}
func (*UnimplementedQueryServer) SentPurchaseorder(ctx context.Context, req *QueryGetSentPurchaseorderRequest) (*QueryGetSentPurchaseorderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentPurchaseorder not implemented")
}
func (*UnimplementedQueryServer) SentPurchaseorderAll(ctx context.Context, req *QueryAllSentPurchaseorderRequest) (*QueryAllSentPurchaseorderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentPurchaseorderAll not implemented")
}
func (*UnimplementedQueryServer) TimedoutPurchaseorder(ctx context.Context, req *QueryGetTimedoutPurchaseorderRequest) (*QueryGetTimedoutPurchaseorderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimedoutPurchaseorder not implemented")
}
func (*UnimplementedQueryServer) TimedoutPurchaseorderAll(ctx context.Context, req *QueryAllTimedoutPurchaseorderRequest) (*QueryAllTimedoutPurchaseorderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimedoutPurchaseorderAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Purchaseorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPurchaseorderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Purchaseorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.purchaseorder.Query/Purchaseorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Purchaseorder(ctx, req.(*QueryGetPurchaseorderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PurchaseorderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPurchaseorderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PurchaseorderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.purchaseorder.Query/PurchaseorderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PurchaseorderAll(ctx, req.(*QueryAllPurchaseorderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SentPurchaseorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSentPurchaseorderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentPurchaseorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.purchaseorder.Query/SentPurchaseorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentPurchaseorder(ctx, req.(*QueryGetSentPurchaseorderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SentPurchaseorderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSentPurchaseorderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentPurchaseorderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.purchaseorder.Query/SentPurchaseorderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentPurchaseorderAll(ctx, req.(*QueryAllSentPurchaseorderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimedoutPurchaseorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimedoutPurchaseorderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimedoutPurchaseorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.purchaseorder.Query/TimedoutPurchaseorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimedoutPurchaseorder(ctx, req.(*QueryGetTimedoutPurchaseorderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimedoutPurchaseorderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTimedoutPurchaseorderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimedoutPurchaseorderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stateset.core.purchaseorder.Query/TimedoutPurchaseorderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimedoutPurchaseorderAll(ctx, req.(*QueryAllTimedoutPurchaseorderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stateset.core.purchaseorder.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Purchaseorder",
			Handler:    _Query_Purchaseorder_Handler,
		},
		{
			MethodName: "PurchaseorderAll",
			Handler:    _Query_PurchaseorderAll_Handler,
		},
		{
			MethodName: "SentPurchaseorder",
			Handler:    _Query_SentPurchaseorder_Handler,
		},
		{
			MethodName: "SentPurchaseorderAll",
			Handler:    _Query_SentPurchaseorderAll_Handler,
		},
		{
			MethodName: "TimedoutPurchaseorder",
			Handler:    _Query_TimedoutPurchaseorder_Handler,
		},
		{
			MethodName: "TimedoutPurchaseorderAll",
			Handler:    _Query_TimedoutPurchaseorderAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "purchaseorder/query.proto",
}

func (m *QueryGetPurchaseorderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPurchaseorderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPurchaseorderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPurchaseorderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPurchaseorderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPurchaseorderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Purchaseorder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPurchaseorderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPurchaseorderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPurchaseorderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPurchaseorderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPurchaseorderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPurchaseorderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Purchaseorder) > 0 {
		for iNdEx := len(m.Purchaseorder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Purchaseorder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentPurchaseorderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentPurchaseorderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentPurchaseorderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentPurchaseorderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentPurchaseorderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentPurchaseorderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SentPurchaseorder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSentPurchaseorderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSentPurchaseorderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSentPurchaseorderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSentPurchaseorderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSentPurchaseorderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSentPurchaseorderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SentPurchaseorder) > 0 {
		for iNdEx := len(m.SentPurchaseorder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SentPurchaseorder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimedoutPurchaseorderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimedoutPurchaseorderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimedoutPurchaseorderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimedoutPurchaseorderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimedoutPurchaseorderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimedoutPurchaseorderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TimedoutPurchaseorder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTimedoutPurchaseorderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimedoutPurchaseorderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimedoutPurchaseorderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTimedoutPurchaseorderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimedoutPurchaseorderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimedoutPurchaseorderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TimedoutPurchaseorder) > 0 {
		for iNdEx := len(m.TimedoutPurchaseorder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimedoutPurchaseorder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetPurchaseorderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPurchaseorderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Purchaseorder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPurchaseorderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPurchaseorderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Purchaseorder) > 0 {
		for _, e := range m.Purchaseorder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSentPurchaseorderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSentPurchaseorderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SentPurchaseorder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSentPurchaseorderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSentPurchaseorderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SentPurchaseorder) > 0 {
		for _, e := range m.SentPurchaseorder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTimedoutPurchaseorderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTimedoutPurchaseorderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TimedoutPurchaseorder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTimedoutPurchaseorderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTimedoutPurchaseorderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TimedoutPurchaseorder) > 0 {
		for _, e := range m.TimedoutPurchaseorder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetPurchaseorderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPurchaseorderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPurchaseorderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPurchaseorderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPurchaseorderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPurchaseorderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaseorder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Purchaseorder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPurchaseorderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPurchaseorderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPurchaseorderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPurchaseorderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPurchaseorderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPurchaseorderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaseorder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaseorder = append(m.Purchaseorder, Purchaseorder{})
			if err := m.Purchaseorder[len(m.Purchaseorder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentPurchaseorderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentPurchaseorderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentPurchaseorderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentPurchaseorderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentPurchaseorderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentPurchaseorderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentPurchaseorder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SentPurchaseorder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSentPurchaseorderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSentPurchaseorderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSentPurchaseorderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSentPurchaseorderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSentPurchaseorderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSentPurchaseorderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentPurchaseorder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentPurchaseorder = append(m.SentPurchaseorder, SentPurchaseorder{})
			if err := m.SentPurchaseorder[len(m.SentPurchaseorder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimedoutPurchaseorderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimedoutPurchaseorderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimedoutPurchaseorderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimedoutPurchaseorderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimedoutPurchaseorderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimedoutPurchaseorderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedoutPurchaseorder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimedoutPurchaseorder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimedoutPurchaseorderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimedoutPurchaseorderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimedoutPurchaseorderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimedoutPurchaseorderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimedoutPurchaseorderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimedoutPurchaseorderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedoutPurchaseorder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimedoutPurchaseorder = append(m.TimedoutPurchaseorder, TimedoutPurchaseorder{})
			if err := m.TimedoutPurchaseorder[len(m.TimedoutPurchaseorder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
